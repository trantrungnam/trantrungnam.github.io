(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"], {
        /***/ "./$$_lazy_route_resource lazy recursive": 
        /*!******************************************************!*\
          !*** ./$$_lazy_route_resource lazy namespace object ***!
          \******************************************************/
        /*! no static exports found */
        /***/ (function (module, exports) {
            function webpackEmptyAsyncContext(req) {
                // Here Promise.resolve().then() is used instead of new Promise() to prevent
                // uncaught exception popping up in devtools
                return Promise.resolve().then(function () {
                    var e = new Error("Cannot find module '" + req + "'");
                    e.code = 'MODULE_NOT_FOUND';
                    throw e;
                });
            }
            webpackEmptyAsyncContext.keys = function () { return []; };
            webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
            module.exports = webpackEmptyAsyncContext;
            webpackEmptyAsyncContext.id = "./$$_lazy_route_resource lazy recursive";
            /***/ 
        }),
        /***/ "./dist/login/fesm2015/login.js": 
        /*!**************************************!*\
          !*** ./dist/login/fesm2015/login.js ***!
          \**************************************/
        /*! exports provided: LoginComponent, LoginModule, LoginService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoginComponent", function () { return LoginComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoginModule", function () { return LoginModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoginService", function () { return LoginService; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
            /* harmony import */ var _angular_flex_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/flex-layout */ "./node_modules/@angular/flex-layout/esm2015/flex-layout.js");
            /**
             * @fileoverview added by tsickle
             * Generated from: lib/login.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var LoginService = /** @class */ (function () {
                function LoginService() {
                }
                return LoginService;
            }());
            LoginService.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                            providedIn: 'root'
                        },] }
            ];
            /** @nocollapse */
            LoginService.ctorParameters = function () { return []; };
            /** @nocollapse */ LoginService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function LoginService_Factory() { return new LoginService(); }, token: LoginService, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * Generated from: lib/login.component.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var LoginComponent = /** @class */ (function () {
                function LoginComponent() {
                }
                /**
                 * @return {?}
                 */
                LoginComponent.prototype.ngOnInit = function () {
                };
                return LoginComponent;
            }());
            LoginComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                            selector: 'app-login-core',
                            template: "<div\r\n  fxLayout=\"row\"\r\n  fxLayoutAlign=\"center\"\r\n  style=\"height: 90vh; background: white;\"\r\n>\r\n  <form\r\n    fxLayout=\"column\"\r\n    style=\"margin: auto; width: 350px;\"\r\n    fxLayoutAlign=\" center\"\r\n    class=\"example-container\"\r\n  >\r\n    <div fxFlex.lt-sm=\"100%\">\r\n            <a\r\n              fxLayoutAlign.lt-sm=\"space-around\"\r\n              fxLayoutAlign=\"center\"\r\n              routerLink=\"/\"\r\n            >\r\n              <img\r\n                src=\"../assets/img/LOGO-VSE-02-new.png\"\r\n                style=\"height: 100px;\"\r\n              />\r\n            </a>\r\n          </div>\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>T\u00E0i kho\u1EA3n</mat-label>\r\n      <input matInput placeholder=\"Placeholder\" />\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>M\u1EADt kh\u1EA9u</mat-label>\r\n      <input matInput placeholder=\"Placeholder\" />\r\n    </mat-form-field>\r\n    <button\r\n      class=\"bg-orange\"\r\n      routerLink=\"/home\"\r\n      type=\"submit\"\r\n      fxFlex=\"100%\"\r\n      mat-raised-button\r\n    >\r\n      \u0110\u0103ng nh\u1EADp\r\n    </button>\r\n    <mat-divider></mat-divider>\r\n          <button mat-button color=\"primary\" href=\"#\">\r\n            B\u1EA1n qu\u00EAn m\u1EADt kh\u1EA9u ?\r\n          </button>\r\n  </form>\r\n</div>\r\n",
                            styles: [".example-container{display:flex;flex-direction:column}.example-container>*{width:100%}.example-button-row a,.example-button-row button{margin-right:8px}.bg-orange{background-color:orange;color:#fff}.color-orange{color:orange}"]
                        }] }
            ];
            /** @nocollapse */
            LoginComponent.ctorParameters = function () { return []; };
            /**
             * @fileoverview added by tsickle
             * Generated from: lib/login.module.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var LoginModule = /** @class */ (function () {
                function LoginModule() {
                }
                return LoginModule;
            }());
            LoginModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            declarations: [LoginComponent],
                            imports: [
                                _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatFormFieldModule"],
                                _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatSelectModule"],
                                _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatInputModule"],
                                _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatButtonModule"],
                                _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDividerModule"],
                                _angular_flex_layout__WEBPACK_IMPORTED_MODULE_2__["FlexLayoutModule"]
                            ],
                            exports: [LoginComponent]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * Generated from: public-api.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * Generated from: login.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=login.js.map
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/app.component.html": 
        /*!**************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/app.component.html ***!
          \**************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<mat-sidenav-container>\r\n  <mat-sidenav\r\n    *ngIf=\"pathName != '/registry' && pathName != '/login'\"\r\n    #sidenav\r\n    role=\"navigation\"\r\n  >\r\n    <mat-nav-list>\r\n      <a mat-list-item class=\"link-white\" routerLink=\"/home\">\r\n        <mat-icon class=\"icon\">home</mat-icon>\r\n        <span class=\"label\">Trang chủ</span>\r\n      </a>\r\n      <a mat-list-item type=\"button link-white\" routerLink=\"/login\">\r\n        <mat-icon class=\"icon\">input</mat-icon>\r\n        <span class=\"label\">Đăng xuất</span>\r\n      </a>\r\n    </mat-nav-list>\r\n  </mat-sidenav>\r\n  <mat-sidenav-content>\r\n    <mat-toolbar\r\n      *ngIf=\"pathName != '/registry' && pathName != '/login'\"\r\n      color=\"primary\"\r\n      style=\"height: 70px;\"\r\n    >\r\n      <div fxHide.gt-xs>\r\n        <button mat-icon-button (click)=\"sidenav.toggle()\">\r\n          <mat-icon>menu</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div fxFlex.lt-sm=\"100%\">\r\n        <a\r\n          fxLayoutAlign.lt-sm=\"space-around\"\r\n          fxLayoutAlign=\"center\"\r\n          routerLink=\"/\"\r\n        >\r\n          <img src=\"../assets/img/vse-logo.png\" style=\"height: 80px;\" />\r\n        </a>\r\n      </div>\r\n      <div\r\n        *ngIf=\"pathName != '/registry'\"\r\n        fxFlex\r\n        fxLayout\r\n        fxLayoutAlign=\"flex-end\"\r\n        fxHide.xs\r\n      >\r\n        <ul fxLayout fxLayoutGap=\"20px\" class=\"navigation-items\">\r\n          <li>\r\n            <a\r\n              mat-list-item\r\n              fxLayout=\"row\"\r\n              class=\"link-white\"\r\n              fxLayoutAlign=\"space-between\"\r\n              routerLink=\"/home\"\r\n            >\r\n              <mat-icon class=\"icon link-white\">home</mat-icon>\r\n              <span class=\"label\">Trang chủ</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              mat-list-item\r\n              fxLayout=\"row\"\r\n              class=\"link-white\"\r\n              routerLink=\"/login\"\r\n            >\r\n              <mat-icon class=\"icon\">input</mat-icon>\r\n              <span class=\"label\">Đăng xuất</span>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </mat-toolbar>\r\n    <main>\r\n      <router-outlet></router-outlet>\r\n    </main>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/masterpage/masterpage.component.html": 
        /*!********************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/masterpage/masterpage.component.html ***!
          \********************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div class=\"mdc-layout-grid\" style=\"height: 90vh;\">\r\n  <div class=\"mdc-layout-grid__inner mdc-layout-grid__cell--align-center\">\r\n    <div class=\"mdc-layout-grid__cell--span-2-phone mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-3-desktop\" >\r\n      <mat-card class=\"example-card\" style=\"height: 80px;\">\r\n        <mat-card-title>HRM</mat-card-title>\r\n        <mat-card-content>\r\n          <p>\r\n            Human Resource Management\r\n          </p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n    <div class=\"mdc-layout-grid__cell--span-2-phone mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-3-desktop\">\r\n      <mat-card class=\"example-card\" style=\"height: 80px;\">\r\n        <mat-card-title>CRM</mat-card-title>\r\n        <mat-card-content>\r\n          <p>\r\n            Customer Relationship Management\r\n          </p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n    <div class=\"mdc-layout-grid__cell--span-2-phone mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-3-desktop\">\r\n      <mat-card class=\"example-card\" style=\"height: 80px;\">\r\n        <mat-card-title>WMS</mat-card-title>\r\n        <mat-card-content>\r\n          <p>\r\n            Warehouse Management System\r\n          </p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n    <div class=\"mdc-layout-grid__cell--span-2-phone mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-3-desktop\">\r\n      <mat-card class=\"example-card\" style=\"height: 80px;\">\r\n        <mat-card-title>TMS</mat-card-title>\r\n        <mat-card-content>\r\n          <p>\r\n            Transport Management System\r\n          </p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/registry/registry.component.html": 
        /*!****************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/registry/registry.component.html ***!
          \****************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div\n  fxLayout=\"row\"\n  fxLayoutAlign=\"center\"\n  style=\"height: 90vh; background: white;\"\n>\n  <form\n    (submit)=\"handle('go')\"\n    fxLayout=\"column\"\n    style=\"margin: auto; width: 350px;\"\n    fxLayoutAlign=\" center\"\n    class=\"example-container\"\n  >\n    <div fxFlex.lt-sm=\"100%\">\n            <a\n              fxLayoutAlign.lt-sm=\"space-around\"\n              fxLayoutAlign=\"center\"\n              routerLink=\"/\"\n            >\n              <img\n                src=\"../assets/img/LOGO-VSE-02-new.png\"\n                style=\"height: 100px;\"\n              />\n            </a>\n          </div>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Tài khoản</mat-label>\n      <input matInput placeholder=\"Placeholder\" />\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Mật khẩu</mat-label>\n      <input matInput placeholder=\"Placeholder\" />\n    </mat-form-field>\n    <button\n      class=\"bg-orange\"\n      routerLink=\"/home\"\n      type=\"submit\"\n      fxFlex=\"100%\"\n      mat-raised-button\n    >\n      Đăng nhập\n    </button>\n    <mat-divider></mat-divider>\n          <button mat-button color=\"primary\" href=\"#\">\n            Bạn quên mật khẩu ?\n          </button>\n  </form>\n</div>\n<!--\n<div\n  fxLayout=\"column\"\n  fxLayoutAlign=\"space-around\"\n  style=\"height: 90vh; background: white;\"\n>\n  <div fxLayoutAlign=\"space-around\">\n    <mat-card class=\"example-card\" style=\"height: 350px; width: 350px;\">\n      <mat-card-header fxLayout=\"column reverse\" fxLayoutAlign=\"center\">\n        <mat-card-title fxLayoutAlign=\"center space-around\" fxLayout=\"column\">\n          <div fxFlex.lt-sm=\"100%\">\n            <a\n              fxLayoutAlign.lt-sm=\"space-around\"\n              fxLayoutAlign=\"center\"\n              routerLink=\"/\"\n            >\n              <img\n                src=\"../assets/img/LOGO-VSE-02-new.png\"\n                style=\"height: 100px;\"\n              />\n            </a>\n          </div>\n        </mat-card-title>\n      </mat-card-header>\n      <mat-card-content>\n        <form\n          (submit)=\"handle('go')\"\n          fxLayout=\"column\"\n          fxLayoutAlign=\" center\"\n          class=\"example-container\"\n        >\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Tài khoản</mat-label>\n            <input matInput placeholder=\"Placeholder\" />\n          </mat-form-field>\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Mật khẩu</mat-label>\n            <input matInput placeholder=\"Placeholder\" />\n          </mat-form-field>\n\n          <mat-checkbox>Nhớ mật khẩu !</mat-checkbox> -->\n<!--\n          <button\n            class=\"bg-orange\"\n            routerLink=\"/home\"\n            type=\"submit\"\n            fxFlex=\"100%\"\n            mat-raised-button\n          >\n            Đăng nhập\n          </button>\n          <mat-divider></mat-divider>\n          <button mat-button color=\"primary\" href=\"#\">\n            Bạn quên mật khẩu ?\n          </button>\n        </form>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div> -->\n");
            /***/ 
        }),
        /***/ "./node_modules/tslib/tslib.es6.js": 
        /*!*****************************************!*\
          !*** ./node_modules/tslib/tslib.es6.js ***!
          \*****************************************/
        /*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function () { return __extends; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function () { return __assign; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function () { return __rest; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function () { return __decorate; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function () { return __param; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function () { return __metadata; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function () { return __awaiter; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function () { return __generator; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function () { return __exportStar; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function () { return __values; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function () { return __read; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function () { return __spread; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function () { return __spreadArrays; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function () { return __await; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function () { return __asyncGenerator; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function () { return __asyncDelegator; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function () { return __asyncValues; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function () { return __makeTemplateObject; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function () { return __importStar; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function () { return __importDefault; });
            /*! *****************************************************************************
            Copyright (c) Microsoft Corporation. All rights reserved.
            Licensed under the Apache License, Version 2.0 (the "License"); you may not use
            this file except in compliance with the License. You may obtain a copy of the
            License at http://www.apache.org/licenses/LICENSE-2.0
            
            THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
            KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
            WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
            MERCHANTABLITY OR NON-INFRINGEMENT.
            
            See the Apache Version 2.0 License for specific language governing permissions
            and limitations under the License.
            ***************************************************************************** */
            /* global Reflect, Promise */
            var extendStatics = function (d, b) {
                extendStatics = Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                    function (d, b) { for (var p in b)
                        if (b.hasOwnProperty(p))
                            d[p] = b[p]; };
                return extendStatics(d, b);
            };
            function __extends(d, b) {
                extendStatics(d, b);
                function __() { this.constructor = d; }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            }
            var __assign = function () {
                __assign = Object.assign || function __assign(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s)
                            if (Object.prototype.hasOwnProperty.call(s, p))
                                t[p] = s[p];
                    }
                    return t;
                };
                return __assign.apply(this, arguments);
            };
            function __rest(s, e) {
                var t = {};
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                        t[p] = s[p];
                if (s != null && typeof Object.getOwnPropertySymbols === "function")
                    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                            t[p[i]] = s[p[i]];
                    }
                return t;
            }
            function __decorate(decorators, target, key, desc) {
                var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }
            function __param(paramIndex, decorator) {
                return function (target, key) { decorator(target, key, paramIndex); };
            }
            function __metadata(metadataKey, metadataValue) {
                if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
                    return Reflect.metadata(metadataKey, metadataValue);
            }
            function __awaiter(thisArg, _arguments, P, generator) {
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try {
                        step(generator.next(value));
                    }
                    catch (e) {
                        reject(e);
                    } }
                    function rejected(value) { try {
                        step(generator["throw"](value));
                    }
                    catch (e) {
                        reject(e);
                    } }
                    function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            }
            function __generator(thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1)
                        throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f)
                        throw new TypeError("Generator is already executing.");
                    while (_)
                        try {
                            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                                return t;
                            if (y = 0, t)
                                op = [op[0] & 2, t.value];
                            switch (op[0]) {
                                case 0:
                                case 1:
                                    t = op;
                                    break;
                                case 4:
                                    _.label++;
                                    return { value: op[1], done: false };
                                case 5:
                                    _.label++;
                                    y = op[1];
                                    op = [0];
                                    continue;
                                case 7:
                                    op = _.ops.pop();
                                    _.trys.pop();
                                    continue;
                                default:
                                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                        _ = 0;
                                        continue;
                                    }
                                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                        _.label = op[1];
                                        break;
                                    }
                                    if (op[0] === 6 && _.label < t[1]) {
                                        _.label = t[1];
                                        t = op;
                                        break;
                                    }
                                    if (t && _.label < t[2]) {
                                        _.label = t[2];
                                        _.ops.push(op);
                                        break;
                                    }
                                    if (t[2])
                                        _.ops.pop();
                                    _.trys.pop();
                                    continue;
                            }
                            op = body.call(thisArg, _);
                        }
                        catch (e) {
                            op = [6, e];
                            y = 0;
                        }
                        finally {
                            f = t = 0;
                        }
                    if (op[0] & 5)
                        throw op[1];
                    return { value: op[0] ? op[1] : void 0, done: true };
                }
            }
            function __exportStar(m, exports) {
                for (var p in m)
                    if (!exports.hasOwnProperty(p))
                        exports[p] = m[p];
            }
            function __values(o) {
                var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
                if (m)
                    return m.call(o);
                return {
                    next: function () {
                        if (o && i >= o.length)
                            o = void 0;
                        return { value: o && o[i++], done: !o };
                    }
                };
            }
            function __read(o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m)
                    return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                        ar.push(r.value);
                }
                catch (error) {
                    e = { error: error };
                }
                finally {
                    try {
                        if (r && !r.done && (m = i["return"]))
                            m.call(i);
                    }
                    finally {
                        if (e)
                            throw e.error;
                    }
                }
                return ar;
            }
            function __spread() {
                for (var ar = [], i = 0; i < arguments.length; i++)
                    ar = ar.concat(__read(arguments[i]));
                return ar;
            }
            function __spreadArrays() {
                for (var s = 0, i = 0, il = arguments.length; i < il; i++)
                    s += arguments[i].length;
                for (var r = Array(s), k = 0, i = 0; i < il; i++)
                    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                        r[k] = a[j];
                return r;
            }
            ;
            function __await(v) {
                return this instanceof __await ? (this.v = v, this) : new __await(v);
            }
            function __asyncGenerator(thisArg, _arguments, generator) {
                if (!Symbol.asyncIterator)
                    throw new TypeError("Symbol.asyncIterator is not defined.");
                var g = generator.apply(thisArg, _arguments || []), i, q = [];
                return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
                function verb(n) { if (g[n])
                    i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
                function resume(n, v) { try {
                    step(g[n](v));
                }
                catch (e) {
                    settle(q[0][3], e);
                } }
                function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
                function fulfill(value) { resume("next", value); }
                function reject(value) { resume("throw", value); }
                function settle(f, v) { if (f(v), q.shift(), q.length)
                    resume(q[0][0], q[0][1]); }
            }
            function __asyncDelegator(o) {
                var i, p;
                return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
                function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
            }
            function __asyncValues(o) {
                if (!Symbol.asyncIterator)
                    throw new TypeError("Symbol.asyncIterator is not defined.");
                var m = o[Symbol.asyncIterator], i;
                return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
                function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
                function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
            }
            function __makeTemplateObject(cooked, raw) {
                if (Object.defineProperty) {
                    Object.defineProperty(cooked, "raw", { value: raw });
                }
                else {
                    cooked.raw = raw;
                }
                return cooked;
            }
            ;
            function __importStar(mod) {
                if (mod && mod.__esModule)
                    return mod;
                var result = {};
                if (mod != null)
                    for (var k in mod)
                        if (Object.hasOwnProperty.call(mod, k))
                            result[k] = mod[k];
                result.default = mod;
                return result;
            }
            function __importDefault(mod) {
                return (mod && mod.__esModule) ? mod : { default: mod };
            }
            /***/ 
        }),
        /***/ "./src/app/app-routing.module.ts": 
        /*!***************************************!*\
          !*** ./src/app/app-routing.module.ts ***!
          \***************************************/
        /*! exports provided: AppRoutingModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppRoutingModule", function () { return AppRoutingModule; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
            /* harmony import */ var _masterpage_masterpage_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./masterpage/masterpage.component */ "./src/app/masterpage/masterpage.component.ts");
            /* harmony import */ var login__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! login */ "./dist/login/fesm2015/login.js");
            // import { LoginComponent } from 'projects/login/src/public-api';
            var routes = [
                { path: 'home', component: _masterpage_masterpage_component__WEBPACK_IMPORTED_MODULE_3__["MasterpageComponent"] },
                // { path: 'registry', component: RegistryComponent },
                { path: 'login', component: login__WEBPACK_IMPORTED_MODULE_4__["LoginComponent"] }
            ];
            var AppRoutingModule = /** @class */ (function () {
                function AppRoutingModule() {
                }
                return AppRoutingModule;
            }());
            AppRoutingModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
                    imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forRoot(routes)],
                    exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]]
                })
            ], AppRoutingModule);
            /***/ 
        }),
        /***/ "./src/app/app.component.scss": 
        /*!************************************!*\
          !*** ./src/app/app.component.scss ***!
          \************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = (":root {\n  --mdc-layout-grid-margin-desktop: 24px;\n  --mdc-layout-grid-gutter-desktop: 24px;\n  --mdc-layout-grid-column-width-desktop: 72px;\n  --mdc-layout-grid-margin-tablet: 16px;\n  --mdc-layout-grid-gutter-tablet: 16px;\n  --mdc-layout-grid-column-width-tablet: 72px;\n  --mdc-layout-grid-margin-phone: 16px;\n  --mdc-layout-grid-gutter-phone: 16px;\n  --mdc-layout-grid-column-width-phone: 72px;\n}\n\n@media (min-width: 840px) {\n  .mdc-layout-grid {\n    box-sizing: border-box;\n    margin: 0 auto;\n    padding: 24px;\n    padding: var(--mdc-layout-grid-margin-desktop, 24px);\n  }\n}\n\n@media (min-width: 480px) and (max-width: 839px) {\n  .mdc-layout-grid {\n    box-sizing: border-box;\n    margin: 0 auto;\n    padding: 16px;\n    padding: var(--mdc-layout-grid-margin-tablet, 16px);\n  }\n}\n\n@media (max-width: 479px) {\n  .mdc-layout-grid {\n    box-sizing: border-box;\n    margin: 0 auto;\n    padding: 16px;\n    padding: var(--mdc-layout-grid-margin-phone, 16px);\n  }\n}\n\n@media (min-width: 840px) {\n  .mdc-layout-grid__inner {\n    display: flex;\n    flex-flow: row wrap;\n    align-items: stretch;\n    margin: -12px;\n    margin: calc(var(--mdc-layout-grid-gutter-desktop, 24px) / 2 * -1);\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__inner {\n      display: grid;\n      margin: 0;\n      grid-gap: 24px;\n      grid-gap: var(--mdc-layout-grid-gutter-desktop, 24px);\n      grid-template-columns: repeat(12, minmax(0, 1fr));\n    }\n  }\n}\n\n@media (min-width: 480px) and (max-width: 839px) {\n  .mdc-layout-grid__inner {\n    display: flex;\n    flex-flow: row wrap;\n    align-items: stretch;\n    margin: -8px;\n    margin: calc(var(--mdc-layout-grid-gutter-tablet, 16px) / 2 * -1);\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__inner {\n      display: grid;\n      margin: 0;\n      grid-gap: 16px;\n      grid-gap: var(--mdc-layout-grid-gutter-tablet, 16px);\n      grid-template-columns: repeat(8, minmax(0, 1fr));\n    }\n  }\n}\n\n@media (max-width: 479px) {\n  .mdc-layout-grid__inner {\n    display: flex;\n    flex-flow: row wrap;\n    align-items: stretch;\n    margin: -8px;\n    margin: calc(var(--mdc-layout-grid-gutter-phone, 16px) / 2 * -1);\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__inner {\n      display: grid;\n      margin: 0;\n      grid-gap: 16px;\n      grid-gap: var(--mdc-layout-grid-gutter-phone, 16px);\n      grid-template-columns: repeat(4, minmax(0, 1fr));\n    }\n  }\n}\n\n@media (min-width: 840px) {\n  .mdc-layout-grid__cell {\n    width: calc(33.3333333333% - 24px);\n    width: calc(33.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px));\n    box-sizing: border-box;\n    margin: 12px;\n    margin: calc(var(--mdc-layout-grid-gutter-desktop, 24px) / 2);\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell {\n      margin: 0;\n    }\n  }\n  .mdc-layout-grid__cell--span-1,\n.mdc-layout-grid__cell--span-1-desktop {\n    width: calc(8.3333333333% - 24px);\n    width: calc(8.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-1,\n.mdc-layout-grid__cell--span-1-desktop {\n      width: auto;\n      grid-column-end: span 1;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-2,\n.mdc-layout-grid__cell--span-2-desktop {\n    width: calc(16.6666666667% - 24px);\n    width: calc(16.6666666667% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-2,\n.mdc-layout-grid__cell--span-2-desktop {\n      width: auto;\n      grid-column-end: span 2;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-3,\n.mdc-layout-grid__cell--span-3-desktop {\n    width: calc(25% - 24px);\n    width: calc(25% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-3,\n.mdc-layout-grid__cell--span-3-desktop {\n      width: auto;\n      grid-column-end: span 3;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-4,\n.mdc-layout-grid__cell--span-4-desktop {\n    width: calc(33.3333333333% - 24px);\n    width: calc(33.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-4,\n.mdc-layout-grid__cell--span-4-desktop {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-5,\n.mdc-layout-grid__cell--span-5-desktop {\n    width: calc(41.6666666667% - 24px);\n    width: calc(41.6666666667% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-5,\n.mdc-layout-grid__cell--span-5-desktop {\n      width: auto;\n      grid-column-end: span 5;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-6,\n.mdc-layout-grid__cell--span-6-desktop {\n    width: calc(50% - 24px);\n    width: calc(50% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-6,\n.mdc-layout-grid__cell--span-6-desktop {\n      width: auto;\n      grid-column-end: span 6;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-7,\n.mdc-layout-grid__cell--span-7-desktop {\n    width: calc(58.3333333333% - 24px);\n    width: calc(58.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-7,\n.mdc-layout-grid__cell--span-7-desktop {\n      width: auto;\n      grid-column-end: span 7;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-8,\n.mdc-layout-grid__cell--span-8-desktop {\n    width: calc(66.6666666667% - 24px);\n    width: calc(66.6666666667% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-8,\n.mdc-layout-grid__cell--span-8-desktop {\n      width: auto;\n      grid-column-end: span 8;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-9,\n.mdc-layout-grid__cell--span-9-desktop {\n    width: calc(75% - 24px);\n    width: calc(75% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-9,\n.mdc-layout-grid__cell--span-9-desktop {\n      width: auto;\n      grid-column-end: span 9;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-10,\n.mdc-layout-grid__cell--span-10-desktop {\n    width: calc(83.3333333333% - 24px);\n    width: calc(83.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-10,\n.mdc-layout-grid__cell--span-10-desktop {\n      width: auto;\n      grid-column-end: span 10;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-11,\n.mdc-layout-grid__cell--span-11-desktop {\n    width: calc(91.6666666667% - 24px);\n    width: calc(91.6666666667% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-11,\n.mdc-layout-grid__cell--span-11-desktop {\n      width: auto;\n      grid-column-end: span 11;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-12,\n.mdc-layout-grid__cell--span-12-desktop {\n    width: calc(100% - 24px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-12,\n.mdc-layout-grid__cell--span-12-desktop {\n      width: auto;\n      grid-column-end: span 12;\n    }\n  }\n}\n\n@media (min-width: 480px) and (max-width: 839px) {\n  .mdc-layout-grid__cell {\n    width: calc(50% - 16px);\n    width: calc(50% - var(--mdc-layout-grid-gutter-tablet, 16px));\n    box-sizing: border-box;\n    margin: 8px;\n    margin: calc(var(--mdc-layout-grid-gutter-tablet, 16px) / 2);\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell {\n      margin: 0;\n    }\n  }\n  .mdc-layout-grid__cell--span-1,\n.mdc-layout-grid__cell--span-1-tablet {\n    width: calc(12.5% - 16px);\n    width: calc(12.5% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-1,\n.mdc-layout-grid__cell--span-1-tablet {\n      width: auto;\n      grid-column-end: span 1;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-2,\n.mdc-layout-grid__cell--span-2-tablet {\n    width: calc(25% - 16px);\n    width: calc(25% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-2,\n.mdc-layout-grid__cell--span-2-tablet {\n      width: auto;\n      grid-column-end: span 2;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-3,\n.mdc-layout-grid__cell--span-3-tablet {\n    width: calc(37.5% - 16px);\n    width: calc(37.5% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-3,\n.mdc-layout-grid__cell--span-3-tablet {\n      width: auto;\n      grid-column-end: span 3;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-4,\n.mdc-layout-grid__cell--span-4-tablet {\n    width: calc(50% - 16px);\n    width: calc(50% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-4,\n.mdc-layout-grid__cell--span-4-tablet {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-5,\n.mdc-layout-grid__cell--span-5-tablet {\n    width: calc(62.5% - 16px);\n    width: calc(62.5% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-5,\n.mdc-layout-grid__cell--span-5-tablet {\n      width: auto;\n      grid-column-end: span 5;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-6,\n.mdc-layout-grid__cell--span-6-tablet {\n    width: calc(75% - 16px);\n    width: calc(75% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-6,\n.mdc-layout-grid__cell--span-6-tablet {\n      width: auto;\n      grid-column-end: span 6;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-7,\n.mdc-layout-grid__cell--span-7-tablet {\n    width: calc(87.5% - 16px);\n    width: calc(87.5% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-7,\n.mdc-layout-grid__cell--span-7-tablet {\n      width: auto;\n      grid-column-end: span 7;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-8,\n.mdc-layout-grid__cell--span-8-tablet {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-8,\n.mdc-layout-grid__cell--span-8-tablet {\n      width: auto;\n      grid-column-end: span 8;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-9,\n.mdc-layout-grid__cell--span-9-tablet {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-9,\n.mdc-layout-grid__cell--span-9-tablet {\n      width: auto;\n      grid-column-end: span 8;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-10,\n.mdc-layout-grid__cell--span-10-tablet {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-10,\n.mdc-layout-grid__cell--span-10-tablet {\n      width: auto;\n      grid-column-end: span 8;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-11,\n.mdc-layout-grid__cell--span-11-tablet {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-11,\n.mdc-layout-grid__cell--span-11-tablet {\n      width: auto;\n      grid-column-end: span 8;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-12,\n.mdc-layout-grid__cell--span-12-tablet {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-12,\n.mdc-layout-grid__cell--span-12-tablet {\n      width: auto;\n      grid-column-end: span 8;\n    }\n  }\n}\n\n@media (max-width: 479px) {\n  .mdc-layout-grid__cell {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n    box-sizing: border-box;\n    margin: 8px;\n    margin: calc(var(--mdc-layout-grid-gutter-phone, 16px) / 2);\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell {\n      margin: 0;\n    }\n  }\n  .mdc-layout-grid__cell--span-1,\n.mdc-layout-grid__cell--span-1-phone {\n    width: calc(25% - 16px);\n    width: calc(25% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-1,\n.mdc-layout-grid__cell--span-1-phone {\n      width: auto;\n      grid-column-end: span 1;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-2,\n.mdc-layout-grid__cell--span-2-phone {\n    width: calc(50% - 16px);\n    width: calc(50% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-2,\n.mdc-layout-grid__cell--span-2-phone {\n      width: auto;\n      grid-column-end: span 2;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-3,\n.mdc-layout-grid__cell--span-3-phone {\n    width: calc(75% - 16px);\n    width: calc(75% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-3,\n.mdc-layout-grid__cell--span-3-phone {\n      width: auto;\n      grid-column-end: span 3;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-4,\n.mdc-layout-grid__cell--span-4-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-4,\n.mdc-layout-grid__cell--span-4-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-5,\n.mdc-layout-grid__cell--span-5-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-5,\n.mdc-layout-grid__cell--span-5-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-6,\n.mdc-layout-grid__cell--span-6-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-6,\n.mdc-layout-grid__cell--span-6-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-7,\n.mdc-layout-grid__cell--span-7-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-7,\n.mdc-layout-grid__cell--span-7-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-8,\n.mdc-layout-grid__cell--span-8-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-8,\n.mdc-layout-grid__cell--span-8-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-9,\n.mdc-layout-grid__cell--span-9-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-9,\n.mdc-layout-grid__cell--span-9-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-10,\n.mdc-layout-grid__cell--span-10-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-10,\n.mdc-layout-grid__cell--span-10-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-11,\n.mdc-layout-grid__cell--span-11-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-11,\n.mdc-layout-grid__cell--span-11-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-12,\n.mdc-layout-grid__cell--span-12-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-12,\n.mdc-layout-grid__cell--span-12-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n}\n\n.mdc-layout-grid__cell--order-1 {\n  order: 1;\n}\n\n.mdc-layout-grid__cell--order-2 {\n  order: 2;\n}\n\n.mdc-layout-grid__cell--order-3 {\n  order: 3;\n}\n\n.mdc-layout-grid__cell--order-4 {\n  order: 4;\n}\n\n.mdc-layout-grid__cell--order-5 {\n  order: 5;\n}\n\n.mdc-layout-grid__cell--order-6 {\n  order: 6;\n}\n\n.mdc-layout-grid__cell--order-7 {\n  order: 7;\n}\n\n.mdc-layout-grid__cell--order-8 {\n  order: 8;\n}\n\n.mdc-layout-grid__cell--order-9 {\n  order: 9;\n}\n\n.mdc-layout-grid__cell--order-10 {\n  order: 10;\n}\n\n.mdc-layout-grid__cell--order-11 {\n  order: 11;\n}\n\n.mdc-layout-grid__cell--order-12 {\n  order: 12;\n}\n\n.mdc-layout-grid__cell--align-top {\n  align-self: flex-start;\n}\n\n@supports (display: grid) {\n  .mdc-layout-grid__cell--align-top {\n    align-self: start;\n  }\n}\n\n.mdc-layout-grid__cell--align-middle {\n  align-self: center;\n}\n\n.mdc-layout-grid__cell--align-bottom {\n  align-self: flex-end;\n}\n\n@supports (display: grid) {\n  .mdc-layout-grid__cell--align-bottom {\n    align-self: end;\n  }\n}\n\n@media (min-width: 840px) {\n  .mdc-layout-grid--fixed-column-width {\n    width: 1176px;\n    width: calc( var(--mdc-layout-grid-column-width-desktop, 72px) * 12 + var(--mdc-layout-grid-gutter-desktop, 24px) * 11 + var(--mdc-layout-grid-margin-desktop, 24px) * 2 );\n  }\n}\n\n@media (min-width: 480px) and (max-width: 839px) {\n  .mdc-layout-grid--fixed-column-width {\n    width: 720px;\n    width: calc( var(--mdc-layout-grid-column-width-tablet, 72px) * 8 + var(--mdc-layout-grid-gutter-tablet, 16px) * 7 + var(--mdc-layout-grid-margin-tablet, 16px) * 2 );\n  }\n}\n\n@media (max-width: 479px) {\n  .mdc-layout-grid--fixed-column-width {\n    width: 368px;\n    width: calc( var(--mdc-layout-grid-column-width-phone, 72px) * 4 + var(--mdc-layout-grid-gutter-phone, 16px) * 3 + var(--mdc-layout-grid-margin-phone, 16px) * 2 );\n  }\n}\n\n.mdc-layout-grid--align-left {\n  margin-right: auto;\n  margin-left: 0;\n}\n\n.mdc-layout-grid--align-right {\n  margin-right: 0;\n  margin-left: auto;\n}\n\nmat-sidenav-container,\nmat-sidenav-content,\nmat-sidenav {\n  height: 100%;\n}\n\nmat-sidenav {\n  width: 250px;\n}\n\n.link-white {\n  text-decoration: none;\n  color: white;\n}\n\na:hover,\na:active {\n  color: lightgray;\n}\n\n.navigation-items {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  cursor: pointer;\n}\n\n.icon {\n  display: inline-block;\n  height: 30px;\n  margin: 0 auto;\n  padding-right: 5px;\n  text-align: center;\n  vertical-align: middle;\n  width: 15%;\n}\n\n.label {\n  display: inline-block;\n  line-height: 30px;\n  margin: 0;\n  width: 85%;\n}\n\n.color-white {\n  color: white;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvRDpcXFZpZXRzdGFyLUNvcmVcXENSTS1Gcm9udGVuZC1EZXNpZ24vbm9kZV9tb2R1bGVzXFxAbWF0ZXJpYWxcXGxheW91dC1ncmlkXFxtZGMtbGF5b3V0LWdyaWQuc2NzcyIsInNyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9EOlxcVmlldHN0YXItQ29yZVxcQ1JNLUZyb250ZW5kLURlc2lnbi9ub2RlX21vZHVsZXNcXEBtYXRlcmlhbFxcbGF5b3V0LWdyaWRcXF9taXhpbnMuc2NzcyIsInNyYy9hcHAvRDpcXFZpZXRzdGFyLUNvcmVcXENSTS1Gcm9udGVuZC1EZXNpZ24vc3JjXFxhcHBcXGFwcC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1QkE7RUFFSSxzQ0FBQTtFQUNBLHNDQUFBO0VBQ0EsNENBQUE7RUFGQSxxQ0FBQTtFQUNBLHFDQUFBO0VBQ0EsMkNBQUE7RUFGQSxvQ0FBQTtFQUNBLG9DQUFBO0VBQ0EsMENBQUE7QUNqQko7O0FDdURJO0VGakNKO0lFb0VFLHNCQUFBO0lBQ0EsY0FBQTtJQUNBLGFGbkVhO0lFb0ViLG9EQUFBO0VEckZBO0FBQ0Y7O0FDeUNJO0VGNUJKO0lFb0VFLHNCQUFBO0lBQ0EsY0FBQTtJQUNBLGFGbkVhO0lFb0ViLG1EQUFBO0VEN0VBO0FBQ0Y7O0FDNEJJO0VGdkJKO0lFb0VFLHNCQUFBO0lBQ0EsY0FBQTtJQUNBLGFGbkVhO0lFb0ViLGtEQUFBO0VEckVBO0FBQ0Y7O0FDOEJJO0VGdkJKO0lFeUVFLGFBQUE7SUFDQSxtQkFBQTtJQUNBLG9CQUFBO0lBQ0EsYUFBQTtJQUNBLGtFQUFBO0VEM0VBO0VDNkVBO0lGL0VGO01FZ0ZJLGFBQUE7TUFDQSxTQUFBO01BQ0EsY0Y5RVc7TUUrRVgscURBQUE7TUFDQSxpREFBQTtJRDFFQTtFQUNGO0FBQ0Y7O0FDTUk7RUZsQko7SUV5RUUsYUFBQTtJQUNBLG1CQUFBO0lBQ0Esb0JBQUE7SUFDQSxZQUFBO0lBQ0EsaUVBQUE7RUR6REE7RUMyREE7SUYvRUY7TUVnRkksYUFBQTtNQUNBLFNBQUE7TUFDQSxjRjlFVztNRStFWCxvREFBQTtNQUNBLGdEQUFBO0lEeERBO0VBQ0Y7QUFDRjs7QUNqQkk7RUZiSjtJRXlFRSxhQUFBO0lBQ0EsbUJBQUE7SUFDQSxvQkFBQTtJQUNBLFlBQUE7SUFDQSxnRUFBQTtFRHZDQTtFQ3lDQTtJRi9FRjtNRWdGSSxhQUFBO01BQ0EsU0FBQTtNQUNBLGNGOUVXO01FK0VYLG1EQUFBO01BQ0EsZ0RBQUE7SUR0Q0E7RUFDRjtBQUNGOztBQ3pCSTtFRlpKO0lFZ0NFLGtDQUFBO0lBQ0EseUVBQUE7SUFtREEsc0JBQUE7SUFDQSxZQUFBO0lBQ0EsNkRBQUE7RUR4Q0E7RUNYQTtJRm5DRjtNRW9DSSxXQUFBO01BQ0EsdUJBQUE7SURjQTtFQUNGO0VDb0NBO0lGeEZGO01FeUZJLFNBQUE7SURqQ0E7RUFDRjtFRDVDZTs7SUVtQmYsaUNBQUE7SUFDQSx3RUFBQTtFRDZCQTtFQzNCQTtJRnRCZTs7TUV1QmIsV0FBQTtNQUNBLHVCQUFBO0lEK0JBO0VBQ0Y7O0VEeERlOztJRW1CZixrQ0FBQTtJQUNBLHlFQUFBO0VEMENBO0VDeENBO0lGdEJlOztNRXVCYixXQUFBO01BQ0EsdUJBQUE7SUQ0Q0E7RUFDRjs7RURyRWU7O0lFbUJmLHVCQUFBO0lBQ0EsOERBQUE7RUR1REE7RUNyREE7SUZ0QmU7O01FdUJiLFdBQUE7TUFDQSx1QkFBQTtJRHlEQTtFQUNGOztFRGxGZTs7SUVtQmYsa0NBQUE7SUFDQSx5RUFBQTtFRG9FQTtFQ2xFQTtJRnRCZTs7TUV1QmIsV0FBQTtNQUNBLHVCQUFBO0lEc0VBO0VBQ0Y7O0VEL0ZlOztJRW1CZixrQ0FBQTtJQUNBLHlFQUFBO0VEaUZBO0VDL0VBO0lGdEJlOztNRXVCYixXQUFBO01BQ0EsdUJBQUE7SURtRkE7RUFDRjs7RUQ1R2U7O0lFbUJmLHVCQUFBO0lBQ0EsOERBQUE7RUQ4RkE7RUM1RkE7SUZ0QmU7O01FdUJiLFdBQUE7TUFDQSx1QkFBQTtJRGdHQTtFQUNGOztFRHpIZTs7SUVtQmYsa0NBQUE7SUFDQSx5RUFBQTtFRDJHQTtFQ3pHQTtJRnRCZTs7TUV1QmIsV0FBQTtNQUNBLHVCQUFBO0lENkdBO0VBQ0Y7O0VEdEllOztJRW1CZixrQ0FBQTtJQUNBLHlFQUFBO0VEd0hBO0VDdEhBO0lGdEJlOztNRXVCYixXQUFBO01BQ0EsdUJBQUE7SUQwSEE7RUFDRjs7RURuSmU7O0lFbUJmLHVCQUFBO0lBQ0EsOERBQUE7RURxSUE7RUNuSUE7SUZ0QmU7O01FdUJiLFdBQUE7TUFDQSx1QkFBQTtJRHVJQTtFQUNGOztFRGhLZTs7SUVtQmYsa0NBQUE7SUFDQSx5RUFBQTtFRGtKQTtFQ2hKQTtJRnRCZTs7TUV1QmIsV0FBQTtNQUNBLHdCQUFBO0lEb0pBO0VBQ0Y7O0VEN0tlOztJRW1CZixrQ0FBQTtJQUNBLHlFQUFBO0VEK0pBO0VDN0pBO0lGdEJlOztNRXVCYixXQUFBO01BQ0Esd0JBQUE7SURpS0E7RUFDRjs7RUQxTGU7O0lFbUJmLHdCQUFBO0lBQ0EsK0RBQUE7RUQ0S0E7RUMxS0E7SUZ0QmU7O01FdUJiLFdBQUE7TUFDQSx3QkFBQTtJRDhLQTtFQUNGO0FBQ0Y7O0FDOU1JO0VGUEo7SUVnQ0UsdUJBQUE7SUFDQSw2REFBQTtJQW1EQSxzQkFBQTtJQUNBLFdBQUE7SUFDQSw0REFBQTtFRHVJQTtFQzFMQTtJRm5DRjtNRW9DSSxXQUFBO01BQ0EsdUJBQUE7SUQ2TEE7RUFDRjtFQzNJQTtJRnhGRjtNRXlGSSxTQUFBO0lEOElBO0VBQ0Y7RUQzTmU7O0lFbUJmLHlCQUFBO0lBQ0EsK0RBQUE7RUQ0TUE7RUMxTUE7SUZ0QmU7O01FdUJiLFdBQUE7TUFDQSx1QkFBQTtJRDhNQTtFQUNGOztFRHZPZTs7SUVtQmYsdUJBQUE7SUFDQSw2REFBQTtFRHlOQTtFQ3ZOQTtJRnRCZTs7TUV1QmIsV0FBQTtNQUNBLHVCQUFBO0lEMk5BO0VBQ0Y7O0VEcFBlOztJRW1CZix5QkFBQTtJQUNBLCtEQUFBO0VEc09BO0VDcE9BO0lGdEJlOztNRXVCYixXQUFBO01BQ0EsdUJBQUE7SUR3T0E7RUFDRjs7RURqUWU7O0lFbUJmLHVCQUFBO0lBQ0EsNkRBQUE7RURtUEE7RUNqUEE7SUZ0QmU7O01FdUJiLFdBQUE7TUFDQSx1QkFBQTtJRHFQQTtFQUNGOztFRDlRZTs7SUVtQmYseUJBQUE7SUFDQSwrREFBQTtFRGdRQTtFQzlQQTtJRnRCZTs7TUV1QmIsV0FBQTtNQUNBLHVCQUFBO0lEa1FBO0VBQ0Y7O0VEM1JlOztJRW1CZix1QkFBQTtJQUNBLDZEQUFBO0VENlFBO0VDM1FBO0lGdEJlOztNRXVCYixXQUFBO01BQ0EsdUJBQUE7SUQrUUE7RUFDRjs7RUR4U2U7O0lFbUJmLHlCQUFBO0lBQ0EsK0RBQUE7RUQwUkE7RUN4UkE7SUZ0QmU7O01FdUJiLFdBQUE7TUFDQSx1QkFBQTtJRDRSQTtFQUNGOztFRHJUZTs7SUVtQmYsd0JBQUE7SUFDQSw4REFBQTtFRHVTQTtFQ3JTQTtJRnRCZTs7TUV1QmIsV0FBQTtNQUNBLHVCQUFBO0lEeVNBO0VBQ0Y7O0VEbFVlOztJRW1CZix3QkFBQTtJQUNBLDhEQUFBO0VEb1RBO0VDbFRBO0lGdEJlOztNRXVCYixXQUFBO01BQ0EsdUJBQUE7SURzVEE7RUFDRjs7RUQvVWU7O0lFbUJmLHdCQUFBO0lBQ0EsOERBQUE7RURpVUE7RUMvVEE7SUZ0QmU7O01FdUJiLFdBQUE7TUFDQSx1QkFBQTtJRG1VQTtFQUNGOztFRDVWZTs7SUVtQmYsd0JBQUE7SUFDQSw4REFBQTtFRDhVQTtFQzVVQTtJRnRCZTs7TUV1QmIsV0FBQTtNQUNBLHVCQUFBO0lEZ1ZBO0VBQ0Y7O0VEeldlOztJRW1CZix3QkFBQTtJQUNBLDhEQUFBO0VEMlZBO0VDelZBO0lGdEJlOztNRXVCYixXQUFBO01BQ0EsdUJBQUE7SUQ2VkE7RUFDRjtBQUNGOztBQ2xZSTtFRkZKO0lFZ0NFLHdCQUFBO0lBQ0EsNkRBQUE7SUFtREEsc0JBQUE7SUFDQSxXQUFBO0lBQ0EsMkRBQUE7RURzVEE7RUN6V0E7SUZuQ0Y7TUVvQ0ksV0FBQTtNQUNBLHVCQUFBO0lENFdBO0VBQ0Y7RUMxVEE7SUZ4RkY7TUV5RkksU0FBQTtJRDZUQTtFQUNGO0VEMVllOztJRW1CZix1QkFBQTtJQUNBLDREQUFBO0VEMlhBO0VDelhBO0lGdEJlOztNRXVCYixXQUFBO01BQ0EsdUJBQUE7SUQ2WEE7RUFDRjs7RUR0WmU7O0lFbUJmLHVCQUFBO0lBQ0EsNERBQUE7RUR3WUE7RUN0WUE7SUZ0QmU7O01FdUJiLFdBQUE7TUFDQSx1QkFBQTtJRDBZQTtFQUNGOztFRG5hZTs7SUVtQmYsdUJBQUE7SUFDQSw0REFBQTtFRHFaQTtFQ25aQTtJRnRCZTs7TUV1QmIsV0FBQTtNQUNBLHVCQUFBO0lEdVpBO0VBQ0Y7O0VEaGJlOztJRW1CZix3QkFBQTtJQUNBLDZEQUFBO0VEa2FBO0VDaGFBO0lGdEJlOztNRXVCYixXQUFBO01BQ0EsdUJBQUE7SURvYUE7RUFDRjs7RUQ3YmU7O0lFbUJmLHdCQUFBO0lBQ0EsNkRBQUE7RUQrYUE7RUM3YUE7SUZ0QmU7O01FdUJiLFdBQUE7TUFDQSx1QkFBQTtJRGliQTtFQUNGOztFRDFjZTs7SUVtQmYsd0JBQUE7SUFDQSw2REFBQTtFRDRiQTtFQzFiQTtJRnRCZTs7TUV1QmIsV0FBQTtNQUNBLHVCQUFBO0lEOGJBO0VBQ0Y7O0VEdmRlOztJRW1CZix3QkFBQTtJQUNBLDZEQUFBO0VEeWNBO0VDdmNBO0lGdEJlOztNRXVCYixXQUFBO01BQ0EsdUJBQUE7SUQyY0E7RUFDRjs7RURwZWU7O0lFbUJmLHdCQUFBO0lBQ0EsNkRBQUE7RURzZEE7RUNwZEE7SUZ0QmU7O01FdUJiLFdBQUE7TUFDQSx1QkFBQTtJRHdkQTtFQUNGOztFRGpmZTs7SUVtQmYsd0JBQUE7SUFDQSw2REFBQTtFRG1lQTtFQ2plQTtJRnRCZTs7TUV1QmIsV0FBQTtNQUNBLHVCQUFBO0lEcWVBO0VBQ0Y7O0VEOWZlOztJRW1CZix3QkFBQTtJQUNBLDZEQUFBO0VEZ2ZBO0VDOWVBO0lGdEJlOztNRXVCYixXQUFBO01BQ0EsdUJBQUE7SURrZkE7RUFDRjs7RUQzZ0JlOztJRW1CZix3QkFBQTtJQUNBLDZEQUFBO0VENmZBO0VDM2ZBO0lGdEJlOztNRXVCYixXQUFBO01BQ0EsdUJBQUE7SUQrZkE7RUFDRjs7RUR4aEJlOztJRW1CZix3QkFBQTtJQUNBLDZEQUFBO0VEMGdCQTtFQ3hnQkE7SUZ0QmU7O01FdUJiLFdBQUE7TUFDQSx1QkFBQTtJRDRnQkE7RUFDRjtBQUNGOztBRDNoQkk7RUVzRUYsUUZ2RWE7QUMraEJmOztBRDloQkk7RUVzRUYsUUZ2RWE7QUNraUJmOztBRGppQkk7RUVzRUYsUUZ2RWE7QUNxaUJmOztBRHBpQkk7RUVzRUYsUUZ2RWE7QUN3aUJmOztBRHZpQkk7RUVzRUYsUUZ2RWE7QUMyaUJmOztBRDFpQkk7RUVzRUYsUUZ2RWE7QUM4aUJmOztBRDdpQkk7RUVzRUYsUUZ2RWE7QUNpakJmOztBRGhqQkk7RUVzRUYsUUZ2RWE7QUNvakJmOztBRG5qQkk7RUVzRUYsUUZ2RWE7QUN1akJmOztBRHRqQkk7RUVzRUYsU0Z2RWE7QUMwakJmOztBRHpqQkk7RUVzRUYsU0Z2RWE7QUM2akJmOztBRDVqQkk7RUVzRUYsU0Z2RWE7QUNna0JmOztBRHpqQkU7RUVxRUUsc0JBQUE7QUR1Zko7O0FDcmZJO0VGdkVGO0lFd0VJLGlCQUFBO0VEd2ZKO0FBQ0Y7O0FEN2pCRTtFRXlFRSxrQkFBQTtBRHVmSjs7QUQ1akJFO0VFeUVFLG9CQUFBO0FEc2ZKOztBQ3BmSTtFRjNFRjtJRTRFSSxlQUFBO0VEdWZKO0FBQ0Y7O0FDOWxCSTtFRitCSjtJRXlGRSxhQUFBO0lBQ0EsMEtBQ0U7RUQwZUY7QUFDRjs7QUMxbUJJO0VGb0NKO0lFeUZFLFlBQUE7SUFDQSxxS0FDRTtFRGdmRjtBQUNGOztBQ3JuQkk7RUZ5Q0o7SUV5RkUsWUFBQTtJQUNBLGtLQUNFO0VEc2ZGO0FBQ0Y7O0FEdGtCQTtFQUNFLGtCQUFBO0VBQ0EsY0FBQTtBQ3lrQkY7O0FEdGtCQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQ3lrQkY7O0FFMXJCQTs7O0VBR0UsWUFBQTtBRjZyQkY7O0FFMXJCQTtFQUNFLFlBQUE7QUY2ckJGOztBRXJyQkE7RUFDRSxxQkFBQTtFQUNBLFlBQUE7QUZ3ckJGOztBRXJyQkE7O0VBRUUsZ0JBQUE7QUZ3ckJGOztBRXJyQkE7RUFDRSxnQkFBQTtFQUNBLFVBQUE7RUFDQSxTQUFBO0VBQ0EsZUFBQTtBRndyQkY7O0FFcnJCQTtFQUNFLHFCQUFBO0VBQ0EsWUFBQTtFQUNBLGNBQUE7RUFDQSxrQkFBQTtFQUNBLGtCQUFBO0VBQ0Esc0JBQUE7RUFDQSxVQUFBO0FGd3JCRjs7QUVyckJBO0VBQ0UscUJBQUE7RUFDQSxpQkFBQTtFQUNBLFNBQUE7RUFDQSxVQUFBO0FGd3JCRjs7QUVyckJBO0VBQ0UsWUFBQTtBRndyQkYiLCJmaWxlIjoic3JjL2FwcC9hcHAuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbkBpbXBvcnQgXCIuL3ZhcmlhYmxlc1wiO1xuQGltcG9ydCBcIi4vbWl4aW5zXCI7XG5cbjpyb290IHtcbiAgQGVhY2ggJHNpemUgaW4gbWFwLWtleXMoJG1kYy1sYXlvdXQtZ3JpZC1jb2x1bW5zKSB7XG4gICAgLS1tZGMtbGF5b3V0LWdyaWQtbWFyZ2luLSN7JHNpemV9OiAje21hcC1nZXQoJG1kYy1sYXlvdXQtZ3JpZC1kZWZhdWx0LW1hcmdpbiwgJHNpemUpfTtcbiAgICAtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItI3skc2l6ZX06ICN7bWFwLWdldCgkbWRjLWxheW91dC1ncmlkLWRlZmF1bHQtZ3V0dGVyLCAkc2l6ZSl9O1xuICAgIC0tbWRjLWxheW91dC1ncmlkLWNvbHVtbi13aWR0aC0jeyRzaXplfTogI3ttYXAtZ2V0KCRtZGMtbGF5b3V0LWdyaWQtY29sdW1uLXdpZHRoLCAkc2l6ZSl9O1xuICB9XG59XG5cbi8vIHBvc3Rjc3MtYmVtLWxpbnRlcjogZGVmaW5lIGxheW91dC1ncmlkXG4ubWRjLWxheW91dC1ncmlkIHtcbiAgQGVhY2ggJHNpemUgaW4gbWFwLWtleXMoJG1kYy1sYXlvdXQtZ3JpZC1jb2x1bW5zKSB7XG4gICAgQGluY2x1ZGUgbWRjLWxheW91dC1ncmlkLW1lZGlhLXF1ZXJ5Xygkc2l6ZSkge1xuICAgICAgJG1hcmdpbjogbWFwLWdldCgkbWRjLWxheW91dC1ncmlkLWRlZmF1bHQtbWFyZ2luLCAkc2l6ZSk7XG5cbiAgICAgIEBpbmNsdWRlIG1kYy1sYXlvdXQtZ3JpZCgkc2l6ZSwgJG1hcmdpbiwgJG1kYy1sYXlvdXQtZ3JpZC1tYXgtd2lkdGgpO1xuICAgIH1cbiAgfVxufVxuXG4ubWRjLWxheW91dC1ncmlkX19pbm5lciB7XG4gIEBlYWNoICRzaXplIGluIG1hcC1rZXlzKCRtZGMtbGF5b3V0LWdyaWQtY29sdW1ucykge1xuICAgIEBpbmNsdWRlIG1kYy1sYXlvdXQtZ3JpZC1tZWRpYS1xdWVyeV8oJHNpemUpIHtcbiAgICAgICRtYXJnaW46IG1hcC1nZXQoJG1kYy1sYXlvdXQtZ3JpZC1kZWZhdWx0LW1hcmdpbiwgJHNpemUpO1xuICAgICAgJGd1dHRlcjogbWFwLWdldCgkbWRjLWxheW91dC1ncmlkLWRlZmF1bHQtZ3V0dGVyLCAkc2l6ZSk7XG5cbiAgICAgIEBpbmNsdWRlIG1kYy1sYXlvdXQtZ3JpZC1pbm5lcigkc2l6ZSwgJG1hcmdpbiwgJGd1dHRlcik7XG4gICAgfVxuICB9XG59XG5cbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwge1xuICAvLyBzZWxlY3QgdGhlIHVwcGVyIGJyZWFrcG9pbnRcbiAgJHVwcGVyLWJyZWFrcG9pbnQ6IG50aChtYXAta2V5cygkbWRjLWxheW91dC1ncmlkLWNvbHVtbnMpLCAxKTtcblxuICBAZWFjaCAkc2l6ZSBpbiBtYXAta2V5cygkbWRjLWxheW91dC1ncmlkLWNvbHVtbnMpIHtcbiAgICBAaW5jbHVkZSBtZGMtbGF5b3V0LWdyaWQtbWVkaWEtcXVlcnlfKCRzaXplKSB7XG4gICAgICAkZ3V0dGVyOiBtYXAtZ2V0KCRtZGMtbGF5b3V0LWdyaWQtZGVmYXVsdC1ndXR0ZXIsICRzaXplKTtcblxuICAgICAgQGluY2x1ZGUgbWRjLWxheW91dC1ncmlkLWNlbGwoJHNpemUsICRtZGMtbGF5b3V0LWdyaWQtZGVmYXVsdC1jb2x1bW4tc3BhbiwgJGd1dHRlcik7XG5cbiAgICAgIEBmb3IgJHNwYW4gZnJvbSAxIHRocm91Z2ggbWFwLWdldCgkbWRjLWxheW91dC1ncmlkLWNvbHVtbnMsICR1cHBlci1icmVha3BvaW50KSB7XG4gICAgICAgIC8vIFNwYW4gY2xhc3Nlcy5cbiAgICAgICAgLy8gc3R5bGVsaW50LWRpc2FibGUgbWF4LW5lc3RpbmctZGVwdGhcbiAgICAgICAgQGF0LXJvb3QgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0jeyRzcGFufSxcbiAgICAgICAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0jeyRzcGFufS0jeyRzaXplfSB7XG4gICAgICAgICAgQGluY2x1ZGUgbWRjLWxheW91dC1ncmlkLWNlbGwtc3Bhbl8oJHNpemUsICRzcGFuLCAkZ3V0dGVyKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzdHlsZWxpbnQtZW5hYmxlIG1heC1uZXN0aW5nLWRlcHRoXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gT3JkZXIgb3ZlcnJpZGUgY2xhc3Nlcy5cbiAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBtYXAtZ2V0KCRtZGMtbGF5b3V0LWdyaWQtY29sdW1ucywgJHVwcGVyLWJyZWFrcG9pbnQpIHtcbiAgICAmLS1vcmRlci0jeyRpfSB7XG4gICAgICBAaW5jbHVkZSBtZGMtbGF5b3V0LWdyaWQtY2VsbC1vcmRlcigkaSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWxpZ25tZW50IGNsYXNzZXMuXG4gICYtLWFsaWduLXRvcCB7XG4gICAgQGluY2x1ZGUgbWRjLWxheW91dC1ncmlkLWNlbGwtYWxpZ24odG9wKTtcbiAgfVxuXG4gICYtLWFsaWduLW1pZGRsZSB7XG4gICAgQGluY2x1ZGUgbWRjLWxheW91dC1ncmlkLWNlbGwtYWxpZ24obWlkZGxlKTtcbiAgfVxuXG4gICYtLWFsaWduLWJvdHRvbSB7XG4gICAgQGluY2x1ZGUgbWRjLWxheW91dC1ncmlkLWNlbGwtYWxpZ24oYm90dG9tKTtcbiAgfVxufVxuXG4ubWRjLWxheW91dC1ncmlkLS1maXhlZC1jb2x1bW4td2lkdGgge1xuICBAZWFjaCAkc2l6ZSBpbiBtYXAta2V5cygkbWRjLWxheW91dC1ncmlkLWNvbHVtbnMpIHtcbiAgICBAaW5jbHVkZSBtZGMtbGF5b3V0LWdyaWQtbWVkaWEtcXVlcnlfKCRzaXplKSB7XG4gICAgICAkbWFyZ2luOiBtYXAtZ2V0KCRtZGMtbGF5b3V0LWdyaWQtZGVmYXVsdC1tYXJnaW4sICRzaXplKTtcbiAgICAgICRndXR0ZXI6IG1hcC1nZXQoJG1kYy1sYXlvdXQtZ3JpZC1kZWZhdWx0LWd1dHRlciwgJHNpemUpO1xuICAgICAgJGNvbHVtbi13aWR0aDogbWFwLWdldCgkbWRjLWxheW91dC1ncmlkLWNvbHVtbi13aWR0aCwgJHNpemUpO1xuXG4gICAgICBAaW5jbHVkZSBtZGMtbGF5b3V0LWdyaWQtZml4ZWQtY29sdW1uLXdpZHRoKCRzaXplLCAkbWFyZ2luLCAkZ3V0dGVyLCAkY29sdW1uLXdpZHRoKTtcbiAgICB9XG4gIH1cbn1cblxuLm1kYy1sYXlvdXQtZ3JpZC0tYWxpZ24tbGVmdCB7XG4gIG1hcmdpbi1yaWdodDogYXV0bztcbiAgbWFyZ2luLWxlZnQ6IDA7XG59XG5cbi5tZGMtbGF5b3V0LWdyaWQtLWFsaWduLXJpZ2h0IHtcbiAgbWFyZ2luLXJpZ2h0OiAwO1xuICBtYXJnaW4tbGVmdDogYXV0bztcbn1cbi8vIHBvc3Rjc3MtYmVtLWxpbnRlcjogZW5kXG4iLCI6cm9vdCB7XG4gIC0tbWRjLWxheW91dC1ncmlkLW1hcmdpbi1kZXNrdG9wOiAyNHB4O1xuICAtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItZGVza3RvcDogMjRweDtcbiAgLS1tZGMtbGF5b3V0LWdyaWQtY29sdW1uLXdpZHRoLWRlc2t0b3A6IDcycHg7XG4gIC0tbWRjLWxheW91dC1ncmlkLW1hcmdpbi10YWJsZXQ6IDE2cHg7XG4gIC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci10YWJsZXQ6IDE2cHg7XG4gIC0tbWRjLWxheW91dC1ncmlkLWNvbHVtbi13aWR0aC10YWJsZXQ6IDcycHg7XG4gIC0tbWRjLWxheW91dC1ncmlkLW1hcmdpbi1waG9uZTogMTZweDtcbiAgLS1tZGMtbGF5b3V0LWdyaWQtZ3V0dGVyLXBob25lOiAxNnB4O1xuICAtLW1kYy1sYXlvdXQtZ3JpZC1jb2x1bW4td2lkdGgtcGhvbmU6IDcycHg7XG59XG5cbkBtZWRpYSAobWluLXdpZHRoOiA4NDBweCkge1xuICAubWRjLWxheW91dC1ncmlkIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICAgIHBhZGRpbmc6IDI0cHg7XG4gICAgcGFkZGluZzogdmFyKC0tbWRjLWxheW91dC1ncmlkLW1hcmdpbi1kZXNrdG9wLCAyNHB4KTtcbiAgfVxufVxuQG1lZGlhIChtaW4td2lkdGg6IDQ4MHB4KSBhbmQgKG1heC13aWR0aDogODM5cHgpIHtcbiAgLm1kYy1sYXlvdXQtZ3JpZCB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgICBwYWRkaW5nOiAxNnB4O1xuICAgIHBhZGRpbmc6IHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1tYXJnaW4tdGFibGV0LCAxNnB4KTtcbiAgfVxufVxuQG1lZGlhIChtYXgtd2lkdGg6IDQ3OXB4KSB7XG4gIC5tZGMtbGF5b3V0LWdyaWQge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgbWFyZ2luOiAwIGF1dG87XG4gICAgcGFkZGluZzogMTZweDtcbiAgICBwYWRkaW5nOiB2YXIoLS1tZGMtbGF5b3V0LWdyaWQtbWFyZ2luLXBob25lLCAxNnB4KTtcbiAgfVxufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogODQwcHgpIHtcbiAgLm1kYy1sYXlvdXQtZ3JpZF9faW5uZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1mbG93OiByb3cgd3JhcDtcbiAgICBhbGlnbi1pdGVtczogc3RyZXRjaDtcbiAgICBtYXJnaW46IC0xMnB4O1xuICAgIG1hcmdpbjogY2FsYyh2YXIoLS1tZGMtbGF5b3V0LWdyaWQtZ3V0dGVyLWRlc2t0b3AsIDI0cHgpIC8gMiAqIC0xKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19pbm5lciB7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgZ3JpZC1nYXA6IDI0cHg7XG4gICAgICBncmlkLWdhcDogdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci1kZXNrdG9wLCAyNHB4KTtcbiAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEyLCBtaW5tYXgoMCwgMWZyKSk7XG4gICAgfVxuICB9XG59XG5AbWVkaWEgKG1pbi13aWR0aDogNDgwcHgpIGFuZCAobWF4LXdpZHRoOiA4MzlweCkge1xuICAubWRjLWxheW91dC1ncmlkX19pbm5lciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWZsb3c6IHJvdyB3cmFwO1xuICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoO1xuICAgIG1hcmdpbjogLThweDtcbiAgICBtYXJnaW46IGNhbGModmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci10YWJsZXQsIDE2cHgpIC8gMiAqIC0xKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19pbm5lciB7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgZ3JpZC1nYXA6IDE2cHg7XG4gICAgICBncmlkLWdhcDogdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci10YWJsZXQsIDE2cHgpO1xuICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoOCwgbWlubWF4KDAsIDFmcikpO1xuICAgIH1cbiAgfVxufVxuQG1lZGlhIChtYXgtd2lkdGg6IDQ3OXB4KSB7XG4gIC5tZGMtbGF5b3V0LWdyaWRfX2lubmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZmxvdzogcm93IHdyYXA7XG4gICAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7XG4gICAgbWFyZ2luOiAtOHB4O1xuICAgIG1hcmdpbjogY2FsYyh2YXIoLS1tZGMtbGF5b3V0LWdyaWQtZ3V0dGVyLXBob25lLCAxNnB4KSAvIDIgKiAtMSk7XG4gIH1cbiAgQHN1cHBvcnRzIChkaXNwbGF5OiBncmlkKSB7XG4gICAgLm1kYy1sYXlvdXQtZ3JpZF9faW5uZXIge1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIGdyaWQtZ2FwOiAxNnB4O1xuICAgICAgZ3JpZC1nYXA6IHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItcGhvbmUsIDE2cHgpO1xuICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoNCwgbWlubWF4KDAsIDFmcikpO1xuICAgIH1cbiAgfVxufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogODQwcHgpIHtcbiAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbCB7XG4gICAgd2lkdGg6IGNhbGMoMzMuMzMzMzMzMzMzMyUgLSAyNHB4KTtcbiAgICB3aWR0aDogY2FsYygzMy4zMzMzMzMzMzMzJSAtIHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItZGVza3RvcCwgMjRweCkpO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgbWFyZ2luOiAxMnB4O1xuICAgIG1hcmdpbjogY2FsYyh2YXIoLS1tZGMtbGF5b3V0LWdyaWQtZ3V0dGVyLWRlc2t0b3AsIDI0cHgpIC8gMik7XG4gIH1cbiAgQHN1cHBvcnRzIChkaXNwbGF5OiBncmlkKSB7XG4gICAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbCB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGdyaWQtY29sdW1uLWVuZDogc3BhbiA0O1xuICAgIH1cbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsIHtcbiAgICAgIG1hcmdpbjogMDtcbiAgICB9XG4gIH1cbiAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xLFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xLWRlc2t0b3Age1xuICAgIHdpZHRoOiBjYWxjKDguMzMzMzMzMzMzMyUgLSAyNHB4KTtcbiAgICB3aWR0aDogY2FsYyg4LjMzMzMzMzMzMzMlIC0gdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci1kZXNrdG9wLCAyNHB4KSk7XG4gIH1cbiAgQHN1cHBvcnRzIChkaXNwbGF5OiBncmlkKSB7XG4gICAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xLFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xLWRlc2t0b3Age1xuICAgICAgd2lkdGg6IGF1dG87XG4gICAgICBncmlkLWNvbHVtbi1lbmQ6IHNwYW4gMTtcbiAgICB9XG4gIH1cblxuICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTIsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTItZGVza3RvcCB7XG4gICAgd2lkdGg6IGNhbGMoMTYuNjY2NjY2NjY2NyUgLSAyNHB4KTtcbiAgICB3aWR0aDogY2FsYygxNi42NjY2NjY2NjY3JSAtIHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItZGVza3RvcCwgMjRweCkpO1xuICB9XG4gIEBzdXBwb3J0cyAoZGlzcGxheTogZ3JpZCkge1xuICAgIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMixcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMi1kZXNrdG9wIHtcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgZ3JpZC1jb2x1bW4tZW5kOiBzcGFuIDI7XG4gICAgfVxuICB9XG5cbiAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0zLFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0zLWRlc2t0b3Age1xuICAgIHdpZHRoOiBjYWxjKDI1JSAtIDI0cHgpO1xuICAgIHdpZHRoOiBjYWxjKDI1JSAtIHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItZGVza3RvcCwgMjRweCkpO1xuICB9XG4gIEBzdXBwb3J0cyAoZGlzcGxheTogZ3JpZCkge1xuICAgIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMyxcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMy1kZXNrdG9wIHtcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgZ3JpZC1jb2x1bW4tZW5kOiBzcGFuIDM7XG4gICAgfVxuICB9XG5cbiAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi00LFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi00LWRlc2t0b3Age1xuICAgIHdpZHRoOiBjYWxjKDMzLjMzMzMzMzMzMzMlIC0gMjRweCk7XG4gICAgd2lkdGg6IGNhbGMoMzMuMzMzMzMzMzMzMyUgLSB2YXIoLS1tZGMtbGF5b3V0LWdyaWQtZ3V0dGVyLWRlc2t0b3AsIDI0cHgpKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTQsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTQtZGVza3RvcCB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGdyaWQtY29sdW1uLWVuZDogc3BhbiA0O1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tNSxcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tNS1kZXNrdG9wIHtcbiAgICB3aWR0aDogY2FsYyg0MS42NjY2NjY2NjY3JSAtIDI0cHgpO1xuICAgIHdpZHRoOiBjYWxjKDQxLjY2NjY2NjY2NjclIC0gdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci1kZXNrdG9wLCAyNHB4KSk7XG4gIH1cbiAgQHN1cHBvcnRzIChkaXNwbGF5OiBncmlkKSB7XG4gICAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi01LFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi01LWRlc2t0b3Age1xuICAgICAgd2lkdGg6IGF1dG87XG4gICAgICBncmlkLWNvbHVtbi1lbmQ6IHNwYW4gNTtcbiAgICB9XG4gIH1cblxuICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTYsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTYtZGVza3RvcCB7XG4gICAgd2lkdGg6IGNhbGMoNTAlIC0gMjRweCk7XG4gICAgd2lkdGg6IGNhbGMoNTAlIC0gdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci1kZXNrdG9wLCAyNHB4KSk7XG4gIH1cbiAgQHN1cHBvcnRzIChkaXNwbGF5OiBncmlkKSB7XG4gICAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi02LFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi02LWRlc2t0b3Age1xuICAgICAgd2lkdGg6IGF1dG87XG4gICAgICBncmlkLWNvbHVtbi1lbmQ6IHNwYW4gNjtcbiAgICB9XG4gIH1cblxuICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTcsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTctZGVza3RvcCB7XG4gICAgd2lkdGg6IGNhbGMoNTguMzMzMzMzMzMzMyUgLSAyNHB4KTtcbiAgICB3aWR0aDogY2FsYyg1OC4zMzMzMzMzMzMzJSAtIHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItZGVza3RvcCwgMjRweCkpO1xuICB9XG4gIEBzdXBwb3J0cyAoZGlzcGxheTogZ3JpZCkge1xuICAgIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tNyxcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tNy1kZXNrdG9wIHtcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgZ3JpZC1jb2x1bW4tZW5kOiBzcGFuIDc7XG4gICAgfVxuICB9XG5cbiAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi04LFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi04LWRlc2t0b3Age1xuICAgIHdpZHRoOiBjYWxjKDY2LjY2NjY2NjY2NjclIC0gMjRweCk7XG4gICAgd2lkdGg6IGNhbGMoNjYuNjY2NjY2NjY2NyUgLSB2YXIoLS1tZGMtbGF5b3V0LWdyaWQtZ3V0dGVyLWRlc2t0b3AsIDI0cHgpKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTgsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTgtZGVza3RvcCB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGdyaWQtY29sdW1uLWVuZDogc3BhbiA4O1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tOSxcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tOS1kZXNrdG9wIHtcbiAgICB3aWR0aDogY2FsYyg3NSUgLSAyNHB4KTtcbiAgICB3aWR0aDogY2FsYyg3NSUgLSB2YXIoLS1tZGMtbGF5b3V0LWdyaWQtZ3V0dGVyLWRlc2t0b3AsIDI0cHgpKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTksXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTktZGVza3RvcCB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGdyaWQtY29sdW1uLWVuZDogc3BhbiA5O1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMTAsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTEwLWRlc2t0b3Age1xuICAgIHdpZHRoOiBjYWxjKDgzLjMzMzMzMzMzMzMlIC0gMjRweCk7XG4gICAgd2lkdGg6IGNhbGMoODMuMzMzMzMzMzMzMyUgLSB2YXIoLS1tZGMtbGF5b3V0LWdyaWQtZ3V0dGVyLWRlc2t0b3AsIDI0cHgpKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTEwLFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xMC1kZXNrdG9wIHtcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgZ3JpZC1jb2x1bW4tZW5kOiBzcGFuIDEwO1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMTEsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTExLWRlc2t0b3Age1xuICAgIHdpZHRoOiBjYWxjKDkxLjY2NjY2NjY2NjclIC0gMjRweCk7XG4gICAgd2lkdGg6IGNhbGMoOTEuNjY2NjY2NjY2NyUgLSB2YXIoLS1tZGMtbGF5b3V0LWdyaWQtZ3V0dGVyLWRlc2t0b3AsIDI0cHgpKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTExLFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xMS1kZXNrdG9wIHtcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgZ3JpZC1jb2x1bW4tZW5kOiBzcGFuIDExO1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMTIsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTEyLWRlc2t0b3Age1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAyNHB4KTtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci1kZXNrdG9wLCAyNHB4KSk7XG4gIH1cbiAgQHN1cHBvcnRzIChkaXNwbGF5OiBncmlkKSB7XG4gICAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xMixcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMTItZGVza3RvcCB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGdyaWQtY29sdW1uLWVuZDogc3BhbiAxMjtcbiAgICB9XG4gIH1cbn1cbkBtZWRpYSAobWluLXdpZHRoOiA0ODBweCkgYW5kIChtYXgtd2lkdGg6IDgzOXB4KSB7XG4gIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwge1xuICAgIHdpZHRoOiBjYWxjKDUwJSAtIDE2cHgpO1xuICAgIHdpZHRoOiBjYWxjKDUwJSAtIHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItdGFibGV0LCAxNnB4KSk7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBtYXJnaW46IDhweDtcbiAgICBtYXJnaW46IGNhbGModmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci10YWJsZXQsIDE2cHgpIC8gMik7XG4gIH1cbiAgQHN1cHBvcnRzIChkaXNwbGF5OiBncmlkKSB7XG4gICAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbCB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGdyaWQtY29sdW1uLWVuZDogc3BhbiA0O1xuICAgIH1cbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsIHtcbiAgICAgIG1hcmdpbjogMDtcbiAgICB9XG4gIH1cbiAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xLFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xLXRhYmxldCB7XG4gICAgd2lkdGg6IGNhbGMoMTIuNSUgLSAxNnB4KTtcbiAgICB3aWR0aDogY2FsYygxMi41JSAtIHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItdGFibGV0LCAxNnB4KSk7XG4gIH1cbiAgQHN1cHBvcnRzIChkaXNwbGF5OiBncmlkKSB7XG4gICAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xLFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xLXRhYmxldCB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGdyaWQtY29sdW1uLWVuZDogc3BhbiAxO1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMixcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMi10YWJsZXQge1xuICAgIHdpZHRoOiBjYWxjKDI1JSAtIDE2cHgpO1xuICAgIHdpZHRoOiBjYWxjKDI1JSAtIHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItdGFibGV0LCAxNnB4KSk7XG4gIH1cbiAgQHN1cHBvcnRzIChkaXNwbGF5OiBncmlkKSB7XG4gICAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0yLFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0yLXRhYmxldCB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGdyaWQtY29sdW1uLWVuZDogc3BhbiAyO1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMyxcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMy10YWJsZXQge1xuICAgIHdpZHRoOiBjYWxjKDM3LjUlIC0gMTZweCk7XG4gICAgd2lkdGg6IGNhbGMoMzcuNSUgLSB2YXIoLS1tZGMtbGF5b3V0LWdyaWQtZ3V0dGVyLXRhYmxldCwgMTZweCkpO1xuICB9XG4gIEBzdXBwb3J0cyAoZGlzcGxheTogZ3JpZCkge1xuICAgIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMyxcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMy10YWJsZXQge1xuICAgICAgd2lkdGg6IGF1dG87XG4gICAgICBncmlkLWNvbHVtbi1lbmQ6IHNwYW4gMztcbiAgICB9XG4gIH1cblxuICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTQsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTQtdGFibGV0IHtcbiAgICB3aWR0aDogY2FsYyg1MCUgLSAxNnB4KTtcbiAgICB3aWR0aDogY2FsYyg1MCUgLSB2YXIoLS1tZGMtbGF5b3V0LWdyaWQtZ3V0dGVyLXRhYmxldCwgMTZweCkpO1xuICB9XG4gIEBzdXBwb3J0cyAoZGlzcGxheTogZ3JpZCkge1xuICAgIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tNCxcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tNC10YWJsZXQge1xuICAgICAgd2lkdGg6IGF1dG87XG4gICAgICBncmlkLWNvbHVtbi1lbmQ6IHNwYW4gNDtcbiAgICB9XG4gIH1cblxuICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTUsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTUtdGFibGV0IHtcbiAgICB3aWR0aDogY2FsYyg2Mi41JSAtIDE2cHgpO1xuICAgIHdpZHRoOiBjYWxjKDYyLjUlIC0gdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci10YWJsZXQsIDE2cHgpKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTUsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTUtdGFibGV0IHtcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgZ3JpZC1jb2x1bW4tZW5kOiBzcGFuIDU7XG4gICAgfVxuICB9XG5cbiAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi02LFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi02LXRhYmxldCB7XG4gICAgd2lkdGg6IGNhbGMoNzUlIC0gMTZweCk7XG4gICAgd2lkdGg6IGNhbGMoNzUlIC0gdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci10YWJsZXQsIDE2cHgpKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTYsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTYtdGFibGV0IHtcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgZ3JpZC1jb2x1bW4tZW5kOiBzcGFuIDY7XG4gICAgfVxuICB9XG5cbiAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi03LFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi03LXRhYmxldCB7XG4gICAgd2lkdGg6IGNhbGMoODcuNSUgLSAxNnB4KTtcbiAgICB3aWR0aDogY2FsYyg4Ny41JSAtIHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItdGFibGV0LCAxNnB4KSk7XG4gIH1cbiAgQHN1cHBvcnRzIChkaXNwbGF5OiBncmlkKSB7XG4gICAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi03LFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi03LXRhYmxldCB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGdyaWQtY29sdW1uLWVuZDogc3BhbiA3O1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tOCxcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tOC10YWJsZXQge1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAxNnB4KTtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci10YWJsZXQsIDE2cHgpKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTgsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTgtdGFibGV0IHtcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgZ3JpZC1jb2x1bW4tZW5kOiBzcGFuIDg7XG4gICAgfVxuICB9XG5cbiAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi05LFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi05LXRhYmxldCB7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDE2cHgpO1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSB2YXIoLS1tZGMtbGF5b3V0LWdyaWQtZ3V0dGVyLXRhYmxldCwgMTZweCkpO1xuICB9XG4gIEBzdXBwb3J0cyAoZGlzcGxheTogZ3JpZCkge1xuICAgIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tOSxcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tOS10YWJsZXQge1xuICAgICAgd2lkdGg6IGF1dG87XG4gICAgICBncmlkLWNvbHVtbi1lbmQ6IHNwYW4gODtcbiAgICB9XG4gIH1cblxuICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTEwLFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xMC10YWJsZXQge1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAxNnB4KTtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci10YWJsZXQsIDE2cHgpKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTEwLFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xMC10YWJsZXQge1xuICAgICAgd2lkdGg6IGF1dG87XG4gICAgICBncmlkLWNvbHVtbi1lbmQ6IHNwYW4gODtcbiAgICB9XG4gIH1cblxuICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTExLFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xMS10YWJsZXQge1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAxNnB4KTtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci10YWJsZXQsIDE2cHgpKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTExLFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xMS10YWJsZXQge1xuICAgICAgd2lkdGg6IGF1dG87XG4gICAgICBncmlkLWNvbHVtbi1lbmQ6IHNwYW4gODtcbiAgICB9XG4gIH1cblxuICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTEyLFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xMi10YWJsZXQge1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAxNnB4KTtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci10YWJsZXQsIDE2cHgpKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTEyLFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xMi10YWJsZXQge1xuICAgICAgd2lkdGg6IGF1dG87XG4gICAgICBncmlkLWNvbHVtbi1lbmQ6IHNwYW4gODtcbiAgICB9XG4gIH1cbn1cbkBtZWRpYSAobWF4LXdpZHRoOiA0NzlweCkge1xuICAubWRjLWxheW91dC1ncmlkX19jZWxsIHtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMTZweCk7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItcGhvbmUsIDE2cHgpKTtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIG1hcmdpbjogOHB4O1xuICAgIG1hcmdpbjogY2FsYyh2YXIoLS1tZGMtbGF5b3V0LWdyaWQtZ3V0dGVyLXBob25lLCAxNnB4KSAvIDIpO1xuICB9XG4gIEBzdXBwb3J0cyAoZGlzcGxheTogZ3JpZCkge1xuICAgIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwge1xuICAgICAgd2lkdGg6IGF1dG87XG4gICAgICBncmlkLWNvbHVtbi1lbmQ6IHNwYW4gNDtcbiAgICB9XG4gIH1cbiAgQHN1cHBvcnRzIChkaXNwbGF5OiBncmlkKSB7XG4gICAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbCB7XG4gICAgICBtYXJnaW46IDA7XG4gICAgfVxuICB9XG4gIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMSxcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMS1waG9uZSB7XG4gICAgd2lkdGg6IGNhbGMoMjUlIC0gMTZweCk7XG4gICAgd2lkdGg6IGNhbGMoMjUlIC0gdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci1waG9uZSwgMTZweCkpO1xuICB9XG4gIEBzdXBwb3J0cyAoZGlzcGxheTogZ3JpZCkge1xuICAgIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMSxcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMS1waG9uZSB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGdyaWQtY29sdW1uLWVuZDogc3BhbiAxO1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMixcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMi1waG9uZSB7XG4gICAgd2lkdGg6IGNhbGMoNTAlIC0gMTZweCk7XG4gICAgd2lkdGg6IGNhbGMoNTAlIC0gdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci1waG9uZSwgMTZweCkpO1xuICB9XG4gIEBzdXBwb3J0cyAoZGlzcGxheTogZ3JpZCkge1xuICAgIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMixcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMi1waG9uZSB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGdyaWQtY29sdW1uLWVuZDogc3BhbiAyO1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMyxcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMy1waG9uZSB7XG4gICAgd2lkdGg6IGNhbGMoNzUlIC0gMTZweCk7XG4gICAgd2lkdGg6IGNhbGMoNzUlIC0gdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci1waG9uZSwgMTZweCkpO1xuICB9XG4gIEBzdXBwb3J0cyAoZGlzcGxheTogZ3JpZCkge1xuICAgIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMyxcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMy1waG9uZSB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGdyaWQtY29sdW1uLWVuZDogc3BhbiAzO1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tNCxcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tNC1waG9uZSB7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDE2cHgpO1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSB2YXIoLS1tZGMtbGF5b3V0LWdyaWQtZ3V0dGVyLXBob25lLCAxNnB4KSk7XG4gIH1cbiAgQHN1cHBvcnRzIChkaXNwbGF5OiBncmlkKSB7XG4gICAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi00LFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi00LXBob25lIHtcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgZ3JpZC1jb2x1bW4tZW5kOiBzcGFuIDQ7XG4gICAgfVxuICB9XG5cbiAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi01LFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi01LXBob25lIHtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMTZweCk7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItcGhvbmUsIDE2cHgpKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTUsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTUtcGhvbmUge1xuICAgICAgd2lkdGg6IGF1dG87XG4gICAgICBncmlkLWNvbHVtbi1lbmQ6IHNwYW4gNDtcbiAgICB9XG4gIH1cblxuICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTYsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTYtcGhvbmUge1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAxNnB4KTtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci1waG9uZSwgMTZweCkpO1xuICB9XG4gIEBzdXBwb3J0cyAoZGlzcGxheTogZ3JpZCkge1xuICAgIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tNixcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tNi1waG9uZSB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGdyaWQtY29sdW1uLWVuZDogc3BhbiA0O1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tNyxcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tNy1waG9uZSB7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDE2cHgpO1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSB2YXIoLS1tZGMtbGF5b3V0LWdyaWQtZ3V0dGVyLXBob25lLCAxNnB4KSk7XG4gIH1cbiAgQHN1cHBvcnRzIChkaXNwbGF5OiBncmlkKSB7XG4gICAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi03LFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi03LXBob25lIHtcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgZ3JpZC1jb2x1bW4tZW5kOiBzcGFuIDQ7XG4gICAgfVxuICB9XG5cbiAgLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi04LFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi04LXBob25lIHtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMTZweCk7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItcGhvbmUsIDE2cHgpKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTgsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTgtcGhvbmUge1xuICAgICAgd2lkdGg6IGF1dG87XG4gICAgICBncmlkLWNvbHVtbi1lbmQ6IHNwYW4gNDtcbiAgICB9XG4gIH1cblxuICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTksXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTktcGhvbmUge1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAxNnB4KTtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci1waG9uZSwgMTZweCkpO1xuICB9XG4gIEBzdXBwb3J0cyAoZGlzcGxheTogZ3JpZCkge1xuICAgIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tOSxcbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tOS1waG9uZSB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGdyaWQtY29sdW1uLWVuZDogc3BhbiA0O1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMTAsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTEwLXBob25lIHtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMTZweCk7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItcGhvbmUsIDE2cHgpKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTEwLFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xMC1waG9uZSB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGdyaWQtY29sdW1uLWVuZDogc3BhbiA0O1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMTEsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTExLXBob25lIHtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMTZweCk7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItcGhvbmUsIDE2cHgpKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTExLFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xMS1waG9uZSB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGdyaWQtY29sdW1uLWVuZDogc3BhbiA0O1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tMTIsXG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTEyLXBob25lIHtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMTZweCk7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItcGhvbmUsIDE2cHgpKTtcbiAgfVxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLTEyLFxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0xMi1waG9uZSB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGdyaWQtY29sdW1uLWVuZDogc3BhbiA0O1xuICAgIH1cbiAgfVxufVxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tb3JkZXItMSB7XG4gIG9yZGVyOiAxO1xufVxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tb3JkZXItMiB7XG4gIG9yZGVyOiAyO1xufVxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tb3JkZXItMyB7XG4gIG9yZGVyOiAzO1xufVxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tb3JkZXItNCB7XG4gIG9yZGVyOiA0O1xufVxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tb3JkZXItNSB7XG4gIG9yZGVyOiA1O1xufVxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tb3JkZXItNiB7XG4gIG9yZGVyOiA2O1xufVxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tb3JkZXItNyB7XG4gIG9yZGVyOiA3O1xufVxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tb3JkZXItOCB7XG4gIG9yZGVyOiA4O1xufVxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tb3JkZXItOSB7XG4gIG9yZGVyOiA5O1xufVxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tb3JkZXItMTAge1xuICBvcmRlcjogMTA7XG59XG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1vcmRlci0xMSB7XG4gIG9yZGVyOiAxMTtcbn1cbi5tZGMtbGF5b3V0LWdyaWRfX2NlbGwtLW9yZGVyLTEyIHtcbiAgb3JkZXI6IDEyO1xufVxuLm1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tYWxpZ24tdG9wIHtcbiAgYWxpZ24tc2VsZjogZmxleC1zdGFydDtcbn1cbkBzdXBwb3J0cyAoZGlzcGxheTogZ3JpZCkge1xuICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1hbGlnbi10b3Age1xuICAgIGFsaWduLXNlbGY6IHN0YXJ0O1xuICB9XG59XG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1hbGlnbi1taWRkbGUge1xuICBhbGlnbi1zZWxmOiBjZW50ZXI7XG59XG4ubWRjLWxheW91dC1ncmlkX19jZWxsLS1hbGlnbi1ib3R0b20ge1xuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcbn1cbkBzdXBwb3J0cyAoZGlzcGxheTogZ3JpZCkge1xuICAubWRjLWxheW91dC1ncmlkX19jZWxsLS1hbGlnbi1ib3R0b20ge1xuICAgIGFsaWduLXNlbGY6IGVuZDtcbiAgfVxufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogODQwcHgpIHtcbiAgLm1kYy1sYXlvdXQtZ3JpZC0tZml4ZWQtY29sdW1uLXdpZHRoIHtcbiAgICB3aWR0aDogMTE3NnB4O1xuICAgIHdpZHRoOiBjYWxjKCB2YXIoLS1tZGMtbGF5b3V0LWdyaWQtY29sdW1uLXdpZHRoLWRlc2t0b3AsIDcycHgpICogMTIgKyB2YXIoLS1tZGMtbGF5b3V0LWdyaWQtZ3V0dGVyLWRlc2t0b3AsIDI0cHgpICogMTEgKyB2YXIoLS1tZGMtbGF5b3V0LWdyaWQtbWFyZ2luLWRlc2t0b3AsIDI0cHgpICogMiApO1xuICB9XG59XG5AbWVkaWEgKG1pbi13aWR0aDogNDgwcHgpIGFuZCAobWF4LXdpZHRoOiA4MzlweCkge1xuICAubWRjLWxheW91dC1ncmlkLS1maXhlZC1jb2x1bW4td2lkdGgge1xuICAgIHdpZHRoOiA3MjBweDtcbiAgICB3aWR0aDogY2FsYyggdmFyKC0tbWRjLWxheW91dC1ncmlkLWNvbHVtbi13aWR0aC10YWJsZXQsIDcycHgpICogOCArIHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItdGFibGV0LCAxNnB4KSAqIDcgKyB2YXIoLS1tZGMtbGF5b3V0LWdyaWQtbWFyZ2luLXRhYmxldCwgMTZweCkgKiAyICk7XG4gIH1cbn1cbkBtZWRpYSAobWF4LXdpZHRoOiA0NzlweCkge1xuICAubWRjLWxheW91dC1ncmlkLS1maXhlZC1jb2x1bW4td2lkdGgge1xuICAgIHdpZHRoOiAzNjhweDtcbiAgICB3aWR0aDogY2FsYyggdmFyKC0tbWRjLWxheW91dC1ncmlkLWNvbHVtbi13aWR0aC1waG9uZSwgNzJweCkgKiA0ICsgdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci1waG9uZSwgMTZweCkgKiAzICsgdmFyKC0tbWRjLWxheW91dC1ncmlkLW1hcmdpbi1waG9uZSwgMTZweCkgKiAyICk7XG4gIH1cbn1cblxuLm1kYy1sYXlvdXQtZ3JpZC0tYWxpZ24tbGVmdCB7XG4gIG1hcmdpbi1yaWdodDogYXV0bztcbiAgbWFyZ2luLWxlZnQ6IDA7XG59XG5cbi5tZGMtbGF5b3V0LWdyaWQtLWFsaWduLXJpZ2h0IHtcbiAgbWFyZ2luLXJpZ2h0OiAwO1xuICBtYXJnaW4tbGVmdDogYXV0bztcbn1cblxubWF0LXNpZGVuYXYtY29udGFpbmVyLFxubWF0LXNpZGVuYXYtY29udGVudCxcbm1hdC1zaWRlbmF2IHtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuXG5tYXQtc2lkZW5hdiB7XG4gIHdpZHRoOiAyNTBweDtcbn1cblxuLmxpbmstd2hpdGUge1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGNvbG9yOiB3aGl0ZTtcbn1cblxuYTpob3ZlcixcbmE6YWN0aXZlIHtcbiAgY29sb3I6IGxpZ2h0Z3JheTtcbn1cblxuLm5hdmlnYXRpb24taXRlbXMge1xuICBsaXN0LXN0eWxlOiBub25lO1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDA7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLmljb24ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGhlaWdodDogMzBweDtcbiAgbWFyZ2luOiAwIGF1dG87XG4gIHBhZGRpbmctcmlnaHQ6IDVweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICB3aWR0aDogMTUlO1xufVxuXG4ubGFiZWwge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xuICBtYXJnaW46IDA7XG4gIHdpZHRoOiA4NSU7XG59XG5cbi5jb2xvci13aGl0ZSB7XG4gIGNvbG9yOiB3aGl0ZTtcbn0iLCIvLyBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbkBpbXBvcnQgXCIuL3ZhcmlhYmxlc1wiO1xuXG4vLyByZXR1cm5zIHRoZSBsb3dlciBncmlkIGJvdW5kYXJ5IG9yIG51bGwgaWYgdGhlIHNtYWxsZXN0IGdyaWQgaXMgc2VsZWN0ZWRcbkBmdW5jdGlvbiBtZGMtbGF5b3V0LWdyaWQtYnJlYWtwb2ludC1taW4oJHNpemUpIHtcbiAgQGlmIG5vdCBtYXAtaGFzLWtleSgkbWRjLWxheW91dC1ncmlkLWNvbHVtbnMsICRzaXplKSB7XG4gICAgQGVycm9yIFwiSW52YWxpZCBzdHlsZSBzcGVjaWZpZWQhIENob29zZSBvbmUgb2YgI3ttYXAta2V5cygkbWRjLWxheW91dC1ncmlkLWNvbHVtbnMpfVwiO1xuICB9XG4gICRtaW46IG1hcC1nZXQoJG1kYy1sYXlvdXQtZ3JpZC1icmVha3BvaW50cywgJHNpemUpO1xuXG4gIEByZXR1cm4gaWYoJG1pbiA+IDAsICRtaW4sIG51bGwpO1xufVxuXG4vLyByZXR1cm5zIHRoZSB1cHBlciBncmlkIGJvdW5kYXJ5IG9yIG51bGwgaWYgdGhlIGxhcmdlc3QgZ3JpZCBpcyBzZWxlY3RlZFxuQGZ1bmN0aW9uIG1kYy1sYXlvdXQtZ3JpZC1icmVha3BvaW50LW1heCgkc2l6ZSkge1xuICBAaWYgbm90IG1hcC1oYXMta2V5KCRtZGMtbGF5b3V0LWdyaWQtY29sdW1ucywgJHNpemUpIHtcbiAgICBAZXJyb3IgXCJJbnZhbGlkIHN0eWxlIHNwZWNpZmllZCEgQ2hvb3NlIG9uZSBvZiAje21hcC1rZXlzKCRtZGMtbGF5b3V0LWdyaWQtY29sdW1ucyl9XCI7XG4gIH1cbiAgJG5hbWVzOiBtYXAta2V5cygkbWRjLWxheW91dC1ncmlkLWNvbHVtbnMpO1xuICAkbjogaW5kZXgoJG5hbWVzLCAkc2l6ZSk7XG4gICRwcmV2OiBpZigkbiA+IDEsIG50aCgkbmFtZXMsICRuIC0gMSksIG51bGwpO1xuXG4gIEByZXR1cm4gaWYoJHByZXYsIChtZGMtbGF5b3V0LWdyaWQtYnJlYWtwb2ludC1taW4oJHByZXYpIC0gMXB4KSwgbnVsbCk7XG59XG5cbi8vIFByaXZhdGUgbWl4aW5zLCBtZWFudCBmb3IgaW50ZXJuYWwgdXNlLlxuQG1peGluIG1kYy1sYXlvdXQtZ3JpZC1tZWRpYS1xdWVyeV8oJHNpemUpIHtcbiAgQGlmIG5vdCBtYXAtaGFzLWtleSgkbWRjLWxheW91dC1ncmlkLWNvbHVtbnMsICRzaXplKSB7XG4gICAgQGVycm9yIFwiSW52YWxpZCBzdHlsZSBzcGVjaWZpZWQhIENob29zZSBvbmUgb2YgI3ttYXAta2V5cygkbWRjLWxheW91dC1ncmlkLWNvbHVtbnMpfVwiO1xuICB9XG5cbiAgJG1pbjogbWRjLWxheW91dC1ncmlkLWJyZWFrcG9pbnQtbWluKCRzaXplKTtcbiAgJG1heDogbWRjLWxheW91dC1ncmlkLWJyZWFrcG9pbnQtbWF4KCRzaXplKTtcblxuICBAaWYgJG1pbiA9PSBudWxsIGFuZCAkbWF4ICE9IG51bGwge1xuICAgIC8vIFBob25lXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICRtYXgpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkbWluICE9IG51bGwgYW5kICRtYXggIT0gbnVsbCB7XG4gICAgLy8gVGFibGV0XG4gICAgQG1lZGlhIChtaW4td2lkdGg6ICRtaW4pIGFuZCAobWF4LXdpZHRoOiAkbWF4KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJG1pbiAhPSBudWxsIGFuZCAkbWF4ID09IG51bGwge1xuICAgIC8vIERlc2t0b3BcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogJG1pbikge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICAvLyBGYWxsYmFjayAtIG5vIGJyZWFrcG9pbnRzIGRlZmluZWRcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG5AbWl4aW4gbWRjLWxheW91dC1ncmlkLWNlbGwtc3Bhbl8oJHNpemUsICRzcGFuLCAkZ3V0dGVyKSB7XG4gIEBpZiBub3QgbWFwLWhhcy1rZXkoJG1kYy1sYXlvdXQtZ3JpZC1jb2x1bW5zLCAkc2l6ZSkge1xuICAgIEBlcnJvciBcIkludmFsaWQgc3R5bGUgc3BlY2lmaWVkISBDaG9vc2Ugb25lIG9mICN7bWFwLWtleXMoJG1kYy1sYXlvdXQtZ3JpZC1jb2x1bW5zKX1cIjtcbiAgfVxuXG4gICRwZXJjZW50OiBwZXJjZW50YWdlKCRzcGFuIC8gbWFwLWdldCgkbWRjLWxheW91dC1ncmlkLWNvbHVtbnMsICRzaXplKSk7XG5cbiAgQGlmICRwZXJjZW50ID4gMTAwJSB7XG4gICAgJHBlcmNlbnQ6IDEwMCU7XG4gIH1cblxuICB3aWR0aDogY2FsYygjeyRwZXJjZW50fSAtICN7JGd1dHRlcn0pO1xuICB3aWR0aDogY2FsYygjeyRwZXJjZW50fSAtIHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItI3skc2l6ZX0sICN7JGd1dHRlcn0pKTtcblxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICB3aWR0aDogYXV0bztcbiAgICBncmlkLWNvbHVtbi1lbmQ6IHNwYW4gbWluKCRzcGFuLCBtYXAtZ2V0KCRtZGMtbGF5b3V0LWdyaWQtY29sdW1ucywgJHNpemUpKTtcbiAgfVxufVxuXG4vLyBQdWJsaWMgbWl4aW5zLCBtZWFudCBmb3IgZGV2ZWxvcGVyIHVzYWdlLlxuQG1peGluIG1kYy1sYXlvdXQtZ3JpZCgkc2l6ZSwgJG1hcmdpbiwgJG1heC13aWR0aDogbnVsbCkge1xuICBAaWYgbm90IG1hcC1oYXMta2V5KCRtZGMtbGF5b3V0LWdyaWQtY29sdW1ucywgJHNpemUpIHtcbiAgICBAZXJyb3IgXCJJbnZhbGlkIHN0eWxlIHNwZWNpZmllZCEgQ2hvb3NlIG9uZSBvZiAje21hcC1rZXlzKCRtZGMtbGF5b3V0LWdyaWQtY29sdW1ucyl9XCI7XG4gIH1cblxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBtYXJnaW46IDAgYXV0bztcbiAgcGFkZGluZzogJG1hcmdpbjtcbiAgcGFkZGluZzogdmFyKC0tbWRjLWxheW91dC1ncmlkLW1hcmdpbi0jeyRzaXplfSwgI3skbWFyZ2lufSk7XG5cbiAgQGlmICRtYXgtd2lkdGgge1xuICAgIG1heC13aWR0aDogJG1heC13aWR0aDtcbiAgfVxufVxuXG5AbWl4aW4gbWRjLWxheW91dC1ncmlkLWlubmVyKCRzaXplLCAkbWFyZ2luLCAkZ3V0dGVyKSB7XG4gIEBpZiBub3QgbWFwLWhhcy1rZXkoJG1kYy1sYXlvdXQtZ3JpZC1jb2x1bW5zLCAkc2l6ZSkge1xuICAgIEBlcnJvciBcIkludmFsaWQgc3R5bGUgc3BlY2lmaWVkISBDaG9vc2Ugb25lIG9mICN7bWFwLWtleXMoJG1kYy1sYXlvdXQtZ3JpZC1jb2x1bW5zKX1cIjtcbiAgfVxuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZmxvdzogcm93IHdyYXA7XG4gIGFsaWduLWl0ZW1zOiBzdHJldGNoO1xuICBtYXJnaW46IC0kZ3V0dGVyIC8gMjtcbiAgbWFyZ2luOiBjYWxjKHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItI3skc2l6ZX0sICN7JGd1dHRlcn0pIC8gMiAqIC0xKTtcblxuICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIG1hcmdpbjogMDtcbiAgICBncmlkLWdhcDogJGd1dHRlcjtcbiAgICBncmlkLWdhcDogdmFyKC0tbWRjLWxheW91dC1ncmlkLWd1dHRlci0jeyRzaXplfSwgJGd1dHRlcik7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQobWFwLWdldCgkbWRjLWxheW91dC1ncmlkLWNvbHVtbnMsICRzaXplKSwgbWlubWF4KDAsIDFmcikpO1xuICB9XG59XG5cbkBtaXhpbiBtZGMtbGF5b3V0LWdyaWQtY2VsbCgkc2l6ZSwgJGRlZmF1bHQtc3BhbiwgJGd1dHRlcikge1xuICBAaWYgbm90IG1hcC1oYXMta2V5KCRtZGMtbGF5b3V0LWdyaWQtY29sdW1ucywgJHNpemUpIHtcbiAgICBAZXJyb3IgXCJJbnZhbGlkIHN0eWxlIHNwZWNpZmllZCEgQ2hvb3NlIG9uZSBvZiAje21hcC1rZXlzKCRtZGMtbGF5b3V0LWdyaWQtY29sdW1ucyl9XCI7XG4gIH1cblxuICBAaW5jbHVkZSBtZGMtbGF5b3V0LWdyaWQtY2VsbC1zcGFuXygkc2l6ZSwgJGRlZmF1bHQtc3BhbiwgJGd1dHRlcik7XG5cbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgbWFyZ2luOiAkZ3V0dGVyIC8gMjtcbiAgbWFyZ2luOiBjYWxjKHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1ndXR0ZXItI3skc2l6ZX0sICN7JGd1dHRlcn0pIC8gMik7XG5cbiAgQHN1cHBvcnRzIChkaXNwbGF5OiBncmlkKSB7XG4gICAgbWFyZ2luOiAwO1xuICB9XG59XG5cbkBtaXhpbiBtZGMtbGF5b3V0LWdyaWQtY2VsbC1vcmRlcigkb3JkZXIpIHtcbiAgb3JkZXI6ICRvcmRlcjtcbn1cblxuQG1peGluIG1kYy1sYXlvdXQtZ3JpZC1jZWxsLWFsaWduKCRwb3NpdGlvbikge1xuICBAaWYgJHBvc2l0aW9uID09IFwidG9wXCIge1xuICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XG5cbiAgICBAc3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgICAgIGFsaWduLXNlbGY6IHN0YXJ0O1xuICAgIH1cbiAgfVxuXG4gIEBpZiAkcG9zaXRpb24gPT0gXCJtaWRkbGVcIiB7XG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICB9XG5cbiAgQGlmICRwb3NpdGlvbiA9PSBcImJvdHRvbVwiIHtcbiAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcblxuICAgIEBzdXBwb3J0cyAoZGlzcGxheTogZ3JpZCkge1xuICAgICAgYWxpZ24tc2VsZjogZW5kO1xuICAgIH1cbiAgfVxuXG4gIEBpZiAkcG9zaXRpb24gPT0gXCJzdHJldGNoXCIge1xuICAgIGFsaWduLXNlbGY6IHN0cmV0Y2g7XG4gIH1cbn1cblxuQG1peGluIG1kYy1sYXlvdXQtZ3JpZC1maXhlZC1jb2x1bW4td2lkdGgoJHNpemUsICRtYXJnaW4sICRndXR0ZXIsICRjb2x1bW4td2lkdGgpIHtcbiAgQGlmIG5vdCBtYXAtaGFzLWtleSgkbWRjLWxheW91dC1ncmlkLWNvbHVtbnMsICRzaXplKSB7XG4gICAgQGVycm9yIFwiSW52YWxpZCBzdHlsZSBzcGVjaWZpZWQhIENob29zZSBvbmUgb2YgI3ttYXAta2V5cygkbWRjLWxheW91dC1ncmlkLWNvbHVtbnMpfVwiO1xuICB9XG5cbiAgJGNvbHVtbkNvdW50OiBtYXAtZ2V0KCRtZGMtbGF5b3V0LWdyaWQtY29sdW1ucywgJHNpemUpO1xuICAkZ3V0dGVyLW51bWJlcjogJGNvbHVtbkNvdW50IC0gMTtcbiAgJG1hcmdpbi1udW1iZXI6IDI7XG5cbiAgd2lkdGg6ICRjb2x1bW4td2lkdGggKiAkY29sdW1uQ291bnQgKyAkZ3V0dGVyICogJGd1dHRlci1udW1iZXIgKyAkbWFyZ2luICogJG1hcmdpbi1udW1iZXI7XG4gIHdpZHRoOlxuICAgIGNhbGMoXG4gICAgICB2YXIoLS1tZGMtbGF5b3V0LWdyaWQtY29sdW1uLXdpZHRoLSN7JHNpemV9LCAjeyRjb2x1bW4td2lkdGh9KSAqICN7JGNvbHVtbkNvdW50fSArXG4gICAgICB2YXIoLS1tZGMtbGF5b3V0LWdyaWQtZ3V0dGVyLSN7JHNpemV9LCAjeyRndXR0ZXJ9KSAqICN7JGd1dHRlci1udW1iZXJ9ICtcbiAgICAgIHZhcigtLW1kYy1sYXlvdXQtZ3JpZC1tYXJnaW4tI3skc2l6ZX0sICN7JG1hcmdpbn0pICogI3skbWFyZ2luLW51bWJlcn1cbiAgICApO1xufVxuIiwiQGltcG9ydCBcIkBtYXRlcmlhbC9sYXlvdXQtZ3JpZC9tZGMtbGF5b3V0LWdyaWRcIjtcclxuXHJcbm1hdC1zaWRlbmF2LWNvbnRhaW5lcixcclxubWF0LXNpZGVuYXYtY29udGVudCxcclxubWF0LXNpZGVuYXYge1xyXG4gIGhlaWdodDogMTAwJTtcclxufVxyXG5cclxubWF0LXNpZGVuYXYge1xyXG4gIHdpZHRoOiAyNTBweDtcclxufVxyXG5cclxuLy8gYSB7XHJcbi8vICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4vLyAgIGNvbG9yOiB3aGl0ZTtcclxuLy8gfVxyXG5cclxuLmxpbmstd2hpdGUge1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICBjb2xvcjogd2hpdGU7XHJcbn1cclxuXHJcbmE6aG92ZXIsXHJcbmE6YWN0aXZlIHtcclxuICBjb2xvcjogbGlnaHRncmF5O1xyXG59XHJcblxyXG4ubmF2aWdhdGlvbi1pdGVtcyB7XHJcbiAgbGlzdC1zdHlsZTogbm9uZTtcclxuICBwYWRkaW5nOiAwO1xyXG4gIG1hcmdpbjogMDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuXHJcbi5pY29uIHtcclxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgaGVpZ2h0OiAzMHB4O1xyXG4gIG1hcmdpbjogMCBhdXRvO1xyXG4gIHBhZGRpbmctcmlnaHQ6IDVweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICB3aWR0aDogMTUlO1xyXG59XHJcblxyXG4ubGFiZWwge1xyXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICBsaW5lLWhlaWdodDogMzBweDtcclxuICBtYXJnaW46IDA7XHJcbiAgd2lkdGg6IDg1JTtcclxufVxyXG5cclxuLmNvbG9yLXdoaXRlIHtcclxuICBjb2xvcjogd2hpdGU7XHJcbn1cclxuIl19 */");
            /***/ 
        }),
        /***/ "./src/app/app.component.ts": 
        /*!**********************************!*\
          !*** ./src/app/app.component.ts ***!
          \**********************************/
        /*! exports provided: AppComponent */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppComponent", function () { return AppComponent; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
            var AppComponent = /** @class */ (function () {
                function AppComponent(_r) {
                    var _this = this;
                    this._r = _r;
                    this.title = 'HRM-Frontend-Design';
                    this.initialCount = 10;
                    this.name = "dashboard";
                    this.pathName = "";
                    this.name = 'Angular2';
                    this._r.events.subscribe(function (event) {
                        if (event instanceof _angular_router__WEBPACK_IMPORTED_MODULE_2__["RoutesRecognized"]) {
                            _this.pathName = event.url;
                            console.log('navigated to:', event.url);
                            console.log('route state', event.state);
                            console.log('');
                        }
                        else if (event instanceof _angular_router__WEBPACK_IMPORTED_MODULE_2__["NavigationEnd"]) {
                            // if u dont need the state, you could even use this event-type..
                        }
                    });
                }
                return AppComponent;
            }());
            AppComponent.ctorParameters = function () { return [
                { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] }
            ]; };
            AppComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'app-root',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./app.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/app.component.html")).default,
                    styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./app.component.scss */ "./src/app/app.component.scss")).default]
                })
            ], AppComponent);
            /***/ 
        }),
        /***/ "./src/app/app.module.ts": 
        /*!*******************************!*\
          !*** ./src/app/app.module.ts ***!
          \*******************************/
        /*! exports provided: AppModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppModule", function () { return AppModule; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_flex_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/flex-layout */ "./node_modules/@angular/flex-layout/esm2015/flex-layout.js");
            /* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
            /* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
            /* harmony import */ var _angular_material_card__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/card */ "./node_modules/@angular/material/esm2015/card.js");
            /* harmony import */ var _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/checkbox */ "./node_modules/@angular/material/esm2015/checkbox.js");
            /* harmony import */ var _app_routing_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./app-routing.module */ "./src/app/app-routing.module.ts");
            /* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./app.component */ "./src/app/app.component.ts");
            /* harmony import */ var _material_module__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./material.module */ "./src/app/material.module.ts");
            /* harmony import */ var _registry_registry_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./registry/registry.component */ "./src/app/registry/registry.component.ts");
            /* harmony import */ var _registry_registry_module__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./registry/registry.module */ "./src/app/registry/registry.module.ts");
            /* harmony import */ var _masterpage_masterpage_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./masterpage/masterpage.component */ "./src/app/masterpage/masterpage.component.ts");
            /* harmony import */ var login__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! login */ "./dist/login/fesm2015/login.js");
            var AppModule = /** @class */ (function () {
                function AppModule() {
                }
                return AppModule;
            }());
            AppModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
                    declarations: [
                        _app_component__WEBPACK_IMPORTED_MODULE_8__["AppComponent"],
                        _registry_registry_component__WEBPACK_IMPORTED_MODULE_10__["RegistryComponent"],
                        _masterpage_masterpage_component__WEBPACK_IMPORTED_MODULE_12__["MasterpageComponent"],
                    ],
                    imports: [
                        _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__["BrowserModule"],
                        _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_4__["BrowserAnimationsModule"],
                        _app_routing_module__WEBPACK_IMPORTED_MODULE_7__["AppRoutingModule"],
                        _material_module__WEBPACK_IMPORTED_MODULE_9__["MaterialModule"],
                        _angular_flex_layout__WEBPACK_IMPORTED_MODULE_2__["FlexLayoutModule"],
                        _registry_registry_module__WEBPACK_IMPORTED_MODULE_11__["RegistryModule"],
                        _angular_material_card__WEBPACK_IMPORTED_MODULE_5__["MatCardModule"],
                        _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_6__["MatCheckboxModule"],
                        login__WEBPACK_IMPORTED_MODULE_13__["LoginModule"]
                    ],
                    providers: [],
                    bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_8__["AppComponent"]]
                })
            ], AppModule);
            /***/ 
        }),
        /***/ "./src/app/masterpage/masterpage.component.scss": 
        /*!******************************************************!*\
          !*** ./src/app/masterpage/masterpage.component.scss ***!
          \******************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = (":root {\n  --mdc-layout-grid-margin-desktop: 24px;\n  --mdc-layout-grid-gutter-desktop: 24px;\n  --mdc-layout-grid-column-width-desktop: 72px;\n  --mdc-layout-grid-margin-tablet: 16px;\n  --mdc-layout-grid-gutter-tablet: 16px;\n  --mdc-layout-grid-column-width-tablet: 72px;\n  --mdc-layout-grid-margin-phone: 16px;\n  --mdc-layout-grid-gutter-phone: 16px;\n  --mdc-layout-grid-column-width-phone: 72px;\n}\n\n@media (min-width: 840px) {\n  .mdc-layout-grid {\n    box-sizing: border-box;\n    margin: 0 auto;\n    padding: 24px;\n    padding: var(--mdc-layout-grid-margin-desktop, 24px);\n  }\n}\n\n@media (min-width: 480px) and (max-width: 839px) {\n  .mdc-layout-grid {\n    box-sizing: border-box;\n    margin: 0 auto;\n    padding: 16px;\n    padding: var(--mdc-layout-grid-margin-tablet, 16px);\n  }\n}\n\n@media (max-width: 479px) {\n  .mdc-layout-grid {\n    box-sizing: border-box;\n    margin: 0 auto;\n    padding: 16px;\n    padding: var(--mdc-layout-grid-margin-phone, 16px);\n  }\n}\n\n@media (min-width: 840px) {\n  .mdc-layout-grid__inner {\n    display: flex;\n    flex-flow: row wrap;\n    align-items: stretch;\n    margin: -12px;\n    margin: calc(var(--mdc-layout-grid-gutter-desktop, 24px) / 2 * -1);\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__inner {\n      display: grid;\n      margin: 0;\n      grid-gap: 24px;\n      grid-gap: var(--mdc-layout-grid-gutter-desktop, 24px);\n      grid-template-columns: repeat(12, minmax(0, 1fr));\n    }\n  }\n}\n\n@media (min-width: 480px) and (max-width: 839px) {\n  .mdc-layout-grid__inner {\n    display: flex;\n    flex-flow: row wrap;\n    align-items: stretch;\n    margin: -8px;\n    margin: calc(var(--mdc-layout-grid-gutter-tablet, 16px) / 2 * -1);\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__inner {\n      display: grid;\n      margin: 0;\n      grid-gap: 16px;\n      grid-gap: var(--mdc-layout-grid-gutter-tablet, 16px);\n      grid-template-columns: repeat(8, minmax(0, 1fr));\n    }\n  }\n}\n\n@media (max-width: 479px) {\n  .mdc-layout-grid__inner {\n    display: flex;\n    flex-flow: row wrap;\n    align-items: stretch;\n    margin: -8px;\n    margin: calc(var(--mdc-layout-grid-gutter-phone, 16px) / 2 * -1);\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__inner {\n      display: grid;\n      margin: 0;\n      grid-gap: 16px;\n      grid-gap: var(--mdc-layout-grid-gutter-phone, 16px);\n      grid-template-columns: repeat(4, minmax(0, 1fr));\n    }\n  }\n}\n\n@media (min-width: 840px) {\n  .mdc-layout-grid__cell {\n    width: calc(33.3333333333% - 24px);\n    width: calc(33.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px));\n    box-sizing: border-box;\n    margin: 12px;\n    margin: calc(var(--mdc-layout-grid-gutter-desktop, 24px) / 2);\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell {\n      margin: 0;\n    }\n  }\n  .mdc-layout-grid__cell--span-1,\n.mdc-layout-grid__cell--span-1-desktop {\n    width: calc(8.3333333333% - 24px);\n    width: calc(8.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-1,\n.mdc-layout-grid__cell--span-1-desktop {\n      width: auto;\n      grid-column-end: span 1;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-2,\n.mdc-layout-grid__cell--span-2-desktop {\n    width: calc(16.6666666667% - 24px);\n    width: calc(16.6666666667% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-2,\n.mdc-layout-grid__cell--span-2-desktop {\n      width: auto;\n      grid-column-end: span 2;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-3,\n.mdc-layout-grid__cell--span-3-desktop {\n    width: calc(25% - 24px);\n    width: calc(25% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-3,\n.mdc-layout-grid__cell--span-3-desktop {\n      width: auto;\n      grid-column-end: span 3;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-4,\n.mdc-layout-grid__cell--span-4-desktop {\n    width: calc(33.3333333333% - 24px);\n    width: calc(33.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-4,\n.mdc-layout-grid__cell--span-4-desktop {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-5,\n.mdc-layout-grid__cell--span-5-desktop {\n    width: calc(41.6666666667% - 24px);\n    width: calc(41.6666666667% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-5,\n.mdc-layout-grid__cell--span-5-desktop {\n      width: auto;\n      grid-column-end: span 5;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-6,\n.mdc-layout-grid__cell--span-6-desktop {\n    width: calc(50% - 24px);\n    width: calc(50% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-6,\n.mdc-layout-grid__cell--span-6-desktop {\n      width: auto;\n      grid-column-end: span 6;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-7,\n.mdc-layout-grid__cell--span-7-desktop {\n    width: calc(58.3333333333% - 24px);\n    width: calc(58.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-7,\n.mdc-layout-grid__cell--span-7-desktop {\n      width: auto;\n      grid-column-end: span 7;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-8,\n.mdc-layout-grid__cell--span-8-desktop {\n    width: calc(66.6666666667% - 24px);\n    width: calc(66.6666666667% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-8,\n.mdc-layout-grid__cell--span-8-desktop {\n      width: auto;\n      grid-column-end: span 8;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-9,\n.mdc-layout-grid__cell--span-9-desktop {\n    width: calc(75% - 24px);\n    width: calc(75% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-9,\n.mdc-layout-grid__cell--span-9-desktop {\n      width: auto;\n      grid-column-end: span 9;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-10,\n.mdc-layout-grid__cell--span-10-desktop {\n    width: calc(83.3333333333% - 24px);\n    width: calc(83.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-10,\n.mdc-layout-grid__cell--span-10-desktop {\n      width: auto;\n      grid-column-end: span 10;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-11,\n.mdc-layout-grid__cell--span-11-desktop {\n    width: calc(91.6666666667% - 24px);\n    width: calc(91.6666666667% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-11,\n.mdc-layout-grid__cell--span-11-desktop {\n      width: auto;\n      grid-column-end: span 11;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-12,\n.mdc-layout-grid__cell--span-12-desktop {\n    width: calc(100% - 24px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-desktop, 24px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-12,\n.mdc-layout-grid__cell--span-12-desktop {\n      width: auto;\n      grid-column-end: span 12;\n    }\n  }\n}\n\n@media (min-width: 480px) and (max-width: 839px) {\n  .mdc-layout-grid__cell {\n    width: calc(50% - 16px);\n    width: calc(50% - var(--mdc-layout-grid-gutter-tablet, 16px));\n    box-sizing: border-box;\n    margin: 8px;\n    margin: calc(var(--mdc-layout-grid-gutter-tablet, 16px) / 2);\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell {\n      margin: 0;\n    }\n  }\n  .mdc-layout-grid__cell--span-1,\n.mdc-layout-grid__cell--span-1-tablet {\n    width: calc(12.5% - 16px);\n    width: calc(12.5% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-1,\n.mdc-layout-grid__cell--span-1-tablet {\n      width: auto;\n      grid-column-end: span 1;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-2,\n.mdc-layout-grid__cell--span-2-tablet {\n    width: calc(25% - 16px);\n    width: calc(25% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-2,\n.mdc-layout-grid__cell--span-2-tablet {\n      width: auto;\n      grid-column-end: span 2;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-3,\n.mdc-layout-grid__cell--span-3-tablet {\n    width: calc(37.5% - 16px);\n    width: calc(37.5% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-3,\n.mdc-layout-grid__cell--span-3-tablet {\n      width: auto;\n      grid-column-end: span 3;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-4,\n.mdc-layout-grid__cell--span-4-tablet {\n    width: calc(50% - 16px);\n    width: calc(50% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-4,\n.mdc-layout-grid__cell--span-4-tablet {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-5,\n.mdc-layout-grid__cell--span-5-tablet {\n    width: calc(62.5% - 16px);\n    width: calc(62.5% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-5,\n.mdc-layout-grid__cell--span-5-tablet {\n      width: auto;\n      grid-column-end: span 5;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-6,\n.mdc-layout-grid__cell--span-6-tablet {\n    width: calc(75% - 16px);\n    width: calc(75% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-6,\n.mdc-layout-grid__cell--span-6-tablet {\n      width: auto;\n      grid-column-end: span 6;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-7,\n.mdc-layout-grid__cell--span-7-tablet {\n    width: calc(87.5% - 16px);\n    width: calc(87.5% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-7,\n.mdc-layout-grid__cell--span-7-tablet {\n      width: auto;\n      grid-column-end: span 7;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-8,\n.mdc-layout-grid__cell--span-8-tablet {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-8,\n.mdc-layout-grid__cell--span-8-tablet {\n      width: auto;\n      grid-column-end: span 8;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-9,\n.mdc-layout-grid__cell--span-9-tablet {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-9,\n.mdc-layout-grid__cell--span-9-tablet {\n      width: auto;\n      grid-column-end: span 8;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-10,\n.mdc-layout-grid__cell--span-10-tablet {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-10,\n.mdc-layout-grid__cell--span-10-tablet {\n      width: auto;\n      grid-column-end: span 8;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-11,\n.mdc-layout-grid__cell--span-11-tablet {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-11,\n.mdc-layout-grid__cell--span-11-tablet {\n      width: auto;\n      grid-column-end: span 8;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-12,\n.mdc-layout-grid__cell--span-12-tablet {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-12,\n.mdc-layout-grid__cell--span-12-tablet {\n      width: auto;\n      grid-column-end: span 8;\n    }\n  }\n}\n\n@media (max-width: 479px) {\n  .mdc-layout-grid__cell {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n    box-sizing: border-box;\n    margin: 8px;\n    margin: calc(var(--mdc-layout-grid-gutter-phone, 16px) / 2);\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell {\n      margin: 0;\n    }\n  }\n  .mdc-layout-grid__cell--span-1,\n.mdc-layout-grid__cell--span-1-phone {\n    width: calc(25% - 16px);\n    width: calc(25% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-1,\n.mdc-layout-grid__cell--span-1-phone {\n      width: auto;\n      grid-column-end: span 1;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-2,\n.mdc-layout-grid__cell--span-2-phone {\n    width: calc(50% - 16px);\n    width: calc(50% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-2,\n.mdc-layout-grid__cell--span-2-phone {\n      width: auto;\n      grid-column-end: span 2;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-3,\n.mdc-layout-grid__cell--span-3-phone {\n    width: calc(75% - 16px);\n    width: calc(75% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-3,\n.mdc-layout-grid__cell--span-3-phone {\n      width: auto;\n      grid-column-end: span 3;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-4,\n.mdc-layout-grid__cell--span-4-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-4,\n.mdc-layout-grid__cell--span-4-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-5,\n.mdc-layout-grid__cell--span-5-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-5,\n.mdc-layout-grid__cell--span-5-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-6,\n.mdc-layout-grid__cell--span-6-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-6,\n.mdc-layout-grid__cell--span-6-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-7,\n.mdc-layout-grid__cell--span-7-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-7,\n.mdc-layout-grid__cell--span-7-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-8,\n.mdc-layout-grid__cell--span-8-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-8,\n.mdc-layout-grid__cell--span-8-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-9,\n.mdc-layout-grid__cell--span-9-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-9,\n.mdc-layout-grid__cell--span-9-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-10,\n.mdc-layout-grid__cell--span-10-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-10,\n.mdc-layout-grid__cell--span-10-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-11,\n.mdc-layout-grid__cell--span-11-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-11,\n.mdc-layout-grid__cell--span-11-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n\n  .mdc-layout-grid__cell--span-12,\n.mdc-layout-grid__cell--span-12-phone {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n  }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--span-12,\n.mdc-layout-grid__cell--span-12-phone {\n      width: auto;\n      grid-column-end: span 4;\n    }\n  }\n}\n\n.mdc-layout-grid__cell--order-1 {\n  order: 1;\n}\n\n.mdc-layout-grid__cell--order-2 {\n  order: 2;\n}\n\n.mdc-layout-grid__cell--order-3 {\n  order: 3;\n}\n\n.mdc-layout-grid__cell--order-4 {\n  order: 4;\n}\n\n.mdc-layout-grid__cell--order-5 {\n  order: 5;\n}\n\n.mdc-layout-grid__cell--order-6 {\n  order: 6;\n}\n\n.mdc-layout-grid__cell--order-7 {\n  order: 7;\n}\n\n.mdc-layout-grid__cell--order-8 {\n  order: 8;\n}\n\n.mdc-layout-grid__cell--order-9 {\n  order: 9;\n}\n\n.mdc-layout-grid__cell--order-10 {\n  order: 10;\n}\n\n.mdc-layout-grid__cell--order-11 {\n  order: 11;\n}\n\n.mdc-layout-grid__cell--order-12 {\n  order: 12;\n}\n\n.mdc-layout-grid__cell--align-top {\n  align-self: flex-start;\n}\n\n@supports (display: grid) {\n  .mdc-layout-grid__cell--align-top {\n    align-self: start;\n  }\n}\n\n.mdc-layout-grid__cell--align-middle {\n  align-self: center;\n}\n\n.mdc-layout-grid__cell--align-bottom {\n  align-self: flex-end;\n}\n\n@supports (display: grid) {\n  .mdc-layout-grid__cell--align-bottom {\n    align-self: end;\n  }\n}\n\n@media (min-width: 840px) {\n  .mdc-layout-grid--fixed-column-width {\n    width: 1176px;\n    width: calc( var(--mdc-layout-grid-column-width-desktop, 72px) * 12 + var(--mdc-layout-grid-gutter-desktop, 24px) * 11 + var(--mdc-layout-grid-margin-desktop, 24px) * 2 );\n  }\n}\n\n@media (min-width: 480px) and (max-width: 839px) {\n  .mdc-layout-grid--fixed-column-width {\n    width: 720px;\n    width: calc( var(--mdc-layout-grid-column-width-tablet, 72px) * 8 + var(--mdc-layout-grid-gutter-tablet, 16px) * 7 + var(--mdc-layout-grid-margin-tablet, 16px) * 2 );\n  }\n}\n\n@media (max-width: 479px) {\n  .mdc-layout-grid--fixed-column-width {\n    width: 368px;\n    width: calc( var(--mdc-layout-grid-column-width-phone, 72px) * 4 + var(--mdc-layout-grid-gutter-phone, 16px) * 3 + var(--mdc-layout-grid-margin-phone, 16px) * 2 );\n  }\n}\n\n.mdc-layout-grid--align-left {\n  margin-right: auto;\n  margin-left: 0;\n}\n\n.mdc-layout-grid--align-right {\n  margin-right: 0;\n  margin-left: auto;\n}\n/*# sourceMappingURL=data:application/json;base64, */");
            /***/ 
        }),
        /***/ "./src/app/masterpage/masterpage.component.ts": 
        /*!****************************************************!*\
          !*** ./src/app/masterpage/masterpage.component.ts ***!
          \****************************************************/
        /*! exports provided: MasterpageComponent */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MasterpageComponent", function () { return MasterpageComponent; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            var MasterpageComponent = /** @class */ (function () {
                function MasterpageComponent() {
                }
                MasterpageComponent.prototype.ngOnInit = function () {
                };
                return MasterpageComponent;
            }());
            MasterpageComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'app-dashboard',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./masterpage.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/masterpage/masterpage.component.html")).default,
                    styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./masterpage.component.scss */ "./src/app/masterpage/masterpage.component.scss")).default]
                })
            ], MasterpageComponent);
            /***/ 
        }),
        /***/ "./src/app/material.module.ts": 
        /*!************************************!*\
          !*** ./src/app/material.module.ts ***!
          \************************************/
        /*! exports provided: MaterialModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaterialModule", function () { return MaterialModule; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
            var MaterialModule = /** @class */ (function () {
                function MaterialModule() {
                }
                return MaterialModule;
            }());
            MaterialModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
                    imports: [
                        _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatSidenavModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatToolbarModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatIconModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatListModule"],
                    ],
                    exports: [
                        _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatSidenavModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatToolbarModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatIconModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatListModule"],
                    ]
                })
            ], MaterialModule);
            /***/ 
        }),
        /***/ "./src/app/registry/registry.component.scss": 
        /*!**************************************************!*\
          !*** ./src/app/registry/registry.component.scss ***!
          \**************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("/* Theme for the ripple elements.*/\n/* stylelint-disable material/no-prefixes */\n/* stylelint-enable */\n.example-container {\n  display: flex;\n  flex-direction: column;\n}\n.example-container > * {\n  width: 100%;\n}\n.example-button-row button,\n.example-button-row a {\n  margin-right: 8px;\n}\n.bg-orange {\n  background-color: orange;\n  color: white;\n}\n.color-orange {\n  color: orange;\n}\n/*# sourceMappingURL=data:application/json;base64, */");
            /***/ 
        }),
        /***/ "./src/app/registry/registry.component.ts": 
        /*!************************************************!*\
          !*** ./src/app/registry/registry.component.ts ***!
          \************************************************/
        /*! exports provided: RegistryComponent */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RegistryComponent", function () { return RegistryComponent; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
            var RegistryComponent = /** @class */ (function () {
                function RegistryComponent(router) {
                    this.path = 'registry';
                    this.router = router;
                }
                RegistryComponent.prototype.handle = function (value) {
                    console.log('This is ' + value);
                    this.router.navigate['/home'];
                };
                RegistryComponent.prototype.ngOnInit = function () {
                };
                return RegistryComponent;
            }());
            RegistryComponent.ctorParameters = function () { return [
                { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] }
            ]; };
            RegistryComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'app-dashboard',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./registry.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/registry/registry.component.html")).default,
                    styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./registry.component.scss */ "./src/app/registry/registry.component.scss")).default]
                })
            ], RegistryComponent);
            /***/ 
        }),
        /***/ "./src/app/registry/registry.module.ts": 
        /*!*********************************************!*\
          !*** ./src/app/registry/registry.module.ts ***!
          \*********************************************/
        /*! exports provided: RegistryModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RegistryModule", function () { return RegistryModule; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/form-field */ "./node_modules/@angular/material/esm2015/form-field.js");
            /* harmony import */ var _angular_material_select__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/select */ "./node_modules/@angular/material/esm2015/select.js");
            /* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/input */ "./node_modules/@angular/material/esm2015/input.js");
            /* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/button */ "./node_modules/@angular/material/esm2015/button.js");
            var RegistryModule = /** @class */ (function () {
                function RegistryModule() {
                }
                return RegistryModule;
            }());
            RegistryModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
                    imports: [
                        _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatFormFieldModule"],
                        _angular_material_select__WEBPACK_IMPORTED_MODULE_3__["MatSelectModule"],
                        _angular_material_input__WEBPACK_IMPORTED_MODULE_4__["MatInputModule"],
                        _angular_material_button__WEBPACK_IMPORTED_MODULE_5__["MatButtonModule"]
                    ],
                    exports: [
                        _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatFormFieldModule"],
                        _angular_material_select__WEBPACK_IMPORTED_MODULE_3__["MatSelectModule"],
                        _angular_material_input__WEBPACK_IMPORTED_MODULE_4__["MatInputModule"],
                        _angular_material_button__WEBPACK_IMPORTED_MODULE_5__["MatButtonModule"]
                    ]
                })
            ], RegistryModule);
            /***/ 
        }),
        /***/ "./src/environments/environment.ts": 
        /*!*****************************************!*\
          !*** ./src/environments/environment.ts ***!
          \*****************************************/
        /*! exports provided: environment */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function () { return environment; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            // This file can be replaced during build by using the `fileReplacements` array.
            // `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
            // The list of file replacements can be found in `angular.json`.
            var environment = {
                production: false
            };
            /*
             * For easier debugging in development mode, you can import the following file
             * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
             *
             * This import should be commented out in production mode because it will have a negative impact
             * on performance if an error is thrown.
             */
            // import 'zone.js/dist/zone-error';  // Included with Angular CLI.
            /***/ 
        }),
        /***/ "./src/main.ts": 
        /*!*********************!*\
          !*** ./src/main.ts ***!
          \*********************/
        /*! no exports provided */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ "./node_modules/@angular/platform-browser-dynamic/fesm2015/platform-browser-dynamic.js");
            /* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! hammerjs */ "./node_modules/hammerjs/hammer.js");
            /* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(hammerjs__WEBPACK_IMPORTED_MODULE_3__);
            /* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./app/app.module */ "./src/app/app.module.ts");
            /* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./environments/environment */ "./src/environments/environment.ts");
            if (_environments_environment__WEBPACK_IMPORTED_MODULE_5__["environment"].production) {
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["enableProdMode"])();
            }
            Object(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_2__["platformBrowserDynamic"])().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_4__["AppModule"])
                .catch(function (err) { return console.error(err); });
            /***/ 
        }),
        /***/ 0: 
        /*!***************************!*\
          !*** multi ./src/main.ts ***!
          \***************************/
        /*! no static exports found */
        /***/ (function (module, exports, __webpack_require__) {
            module.exports = __webpack_require__(/*! D:\Vietstar-Core\CRM-Frontend-Design\src\main.ts */ "./src/main.ts");
            /***/ 
        })
    }, [[0, "runtime", "vendor"]]]);
//# sourceMappingURL=main-es2015.js.map
//# sourceMappingURL=main-es5.js.map
//# sourceMappingURL=main-es5.js.map